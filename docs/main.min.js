!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){var n=function(e){return Object.keys(e||{})},r=function(e){return function(t){return typeof t===e}},o=r("string"),i=r("boolean"),a=r("function"),c=r("object"),u=r("undefined"),s=function(e){return Array.isArray(e)},l=function(e){return null==e};function f(){return Object.assign.apply(null,Array.from(arguments))}function h(e){throw new Error(e)}var d,p=["element","handle","_pe","_pc","_rc","_se","_e","_i","_rt"],m=function e(t,r){if(l(t)&&l(r))return!0;if(l(t)||l(r))return!1;if(typeof t!=typeof r)return!1;if(a(t))return!0;if(s(t))return s(r)&&t.length===r.length&&t.reduce((function(t,n,o){return t&&e(n,r[o])}),!0);if(c(t)){var o=y(t,r);return n(t).reduce((function(e,t){return e&&o(t)}),!0)}return t===r},y=function(e,t){return function(n){return!!(p.includes(n)||l(e)&&l(t))||!l(e)&&!l(t)&&m(e[n],t[n])}},v={class:"className"},w="textContent|innerText|innerHTML|className|value|style|checked|selected|src|srcdoc|srcset|tabindex|target".split("|").reduce((function(e,t){return e[t]=1,e}),{}),g={},b=function(e){return function(){this._lF(["onWillRemove"]),this._rc.forEach((function(e){return e._rmF()})),e[this.handle]=null;var t=this._pe;this._se&&this._se.forEach((function(e){return e()})),this.element&&t&&t!==this.element&&t.removeChild(this.element),this.element=null,this._pc=null,this._pe=null}}(g),A={debug:!1},O=function(e,t){return function(){var n=[].slice.call(arguments);return A.debug&&console.log(t+" called with context: ",this,"args",n),e.apply(this,n)}},x=((d={})._aF=O((function(e){this._pe=e;var t=this.tagName?this.element:this._pe;return t||(t=document.createElementNS(this._ns||"http://www.w3.org/1999/xhtml",this.tagName),e.appendChild(t)),t}),"attach"),d._aelF=O((function(e,t){var n=this;if(!this._v){var r=function(e){t.apply(n,[e,o,n])},o=this.element;return o.addEventListener(e,r),function(){return o.removeEventListener(e,r)}}}),"addEventListener"),d._saF=O((function(){var e=this;this._v||((this._se||[]).forEach((function(e){return e()})),n(this.data).forEach((function(t){var n=e.data[t];if("on"===t.slice(0,"on".length))return e._se=e._se||[],void e._se.push(e._aelF(t.slice(2),n));!function(e,t,n,r){if("children"!==t){if("ref"===t||"_ns"===t)return n(e,r);var o=v[t]||t;w[o]||i(n)?e[o]=n:e.setAttribute(o,n)}}(e.element,t,n,e)})))}),"setAttribute"),d._rcF=O((function(e,t){var n=this;if(a(this.content)){var r=f({},this.data,{children:(this._e||{}).children});this.data.children=[this.content(r,(function(e){return n.update(e)}))]}var o=this._rc,i=this.data.children.filter((function(e){return null!=e})).map((function(n,r){n._rF||h("child must have render function");var i=function(e){return o?o[e]:null}(r);if(!i)return n.mount(e,t);var a=i._ccF(n),c=a.reusable;return a.identical&&i._v?(o[r]=void 0,i):c?(o[r]=void 0,i._lF(["onDataUpdated",i._e,n._e])&&i._dcF(n._e),i):n.mount(e,t)}));return o&&o.forEach((function(e){e&&e._rmF&&e._rmF()})),i}),"renderChildren"),d._rF=O((function(e,t){var n=this,r=this._aF(e);this._pc=t,this.element=this._v?null:r;var o=[this.element,this.data,function(e){return n.update(e)},this];return this._lF(["onAttach"].concat(o)),this._rc=this._rcF(r,this._v?this:t),this._saF(),this._lF(["onRender"].concat(o)),this}),"render"),d._rmF=O(b,"remove"),d._ccF=O((function(e){var t=y(this.data,e.data);return{identical:n(this.data).reduce((function(e,n){return e&&t(n)}),!0),reusable:this.tagName?y(this,e)("tagName"):m(this._rt,e._rt)}}),"compare"),d._lF=O((function(e){var t=this[e[0]];if(t){var n=t.apply(this,e.slice(1));if(!u(n))return n}return!0}),"commitLifecyleEvent"),d._dcF=O((function(e){this._sdF(this._i,e);var t=this._lF(["onDataChange",this.data,e]);c(t)&&(console.log("data is dataOverride",t),this.data=t),this._saF(),this._cF(this)}),"dataDidChange"),d._sdF=O((function(e,t){this._e=f({},t),this._i=f({},e),this.data=f({},this._i,this._e)}),"setData"),d._cF=O((function(e){e._rc=e._rcF(e.element||e._pe,e)}),"commitUpdate"),d.update=O((function(e){var t=this,r=e,o=!1,i=!1,c={};a(this.updateReducer)&&(r=this.updateReducer(this.data,e)),this.data=n(r).reduce((function(e,n){return e[n]!==r[n]&&(u(t._e[n])?(o=!0,t._i[n]=r[n],e[n]=r[n]):(i=!0,c[n]=r[n])),e}),this.data),i&&this._pc&&this._pc.update(c),o&&!i&&setTimeout((function(){t._cF(t)}),0)}),"update"),d.mount=O((function(e,t){var n=this._rF(e,t);return this.handle=this.handle||this.data.id||Symbol(n.tagName||"v"),n.element&&(n.element._rmF=n._rmF),g[this.handle]=n,n}),"mount"),d),_=function(e,t){this._sdF(t,e),this._v=!0},E=function(e,t,n){var r=new _(e);return r.tagName=t,r._v=!1,f(r,n)},j=function(e,t,n){return f(new _(e,t),n)};n(x).forEach((function(e){return _.prototype[e]=x[e]}));var C=function(e){e.tagName||e._c||h("tagName or Component must be defined");var t=Symbol("rt"),n=function(){var t,n=[].slice.call(arguments),r=n[0]||{},i=n.slice(1);s(n[0])?(i=n[0],r={}):o(n[0])?r={textContent:n[0]}:(n[0]||{})._rF&&(i.unshift(n[0]),r={}),o(i[0])&&(r.textContent=i[0],i=i.slice(1)),s(i[0])&&(i=i[0]);var a=f({},r,((t={}).children=i,t));return o(e.tagName)?E(a,e.tagName,e._o):e._c.prototype instanceof _?new e._c(a,e._i):j(a,e._i,f({},e._o,{content:e._c}))};return function(){var e=n.apply(void 0,[].slice.call(arguments));return e._rt=t,e}};window.eleMint={handles:g,config:A},t.Component=_,t.register=function(e,t){var n;return C(((n={}).tagName=e,n._o=t,n))},t.registerComponent=function(e,t,n){var r;return C(((r={})._c=e,r._i=t,r._o=n,r))},t.registerSVG=function(e){var t,n;return C(((n={}).tagName=e,n._o=((t={})._ns="http://www.w3.org/2000/svg",t),n))}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,c,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return re}));n(0);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o={$:function(e){return document.querySelector(e)},$$:function(e){return Array.from(document.querySelectorAll(e))}};var i=function(e){return function(t){return r(t)===e}},a=(i("string"),i("boolean"),i("function"));i("object"),i("undefined");function c(e){return new Array(e).join(",").split(",")}function u(e,t,n,r){return{x:e,y:t,w:n,h:r||n}}function s(e){var t=e;return{getPoint:function(){return l(t.x,t.y)},setPoint:function(e){t.x=e.x,t.y=e.y},shrink:function(e){return u(t.x+e,t.y+e,t.w-2*e,t.h-2*e)},expand:function(e){return u(t.x-e,t.y-e,t.w+2*e,t.h+2*e)},circle:function(e){return e||(e=Math.min(t.w,t.h)/2),n=t.x+t.w/2,r=t.y+t.h/2,{x:n,y:r,diameter:e};var n,r},inFrame:function(e){return e.x>=t.x&&e.y>=t.y&&e.y<=t.y+t.h&&e.x<=t.x+t.w},scale:function(e){return u(t.x,t.y,t.w*e,t.h*e)}}}function l(e,t){return{x:e,y:t}}function f(e){return{toRect:function(t,n){return u(e.x,e.y,t,n)},translate:function(t){return l(t.x+e.x,t.y+e.y)}}}function h(e,t){var n=t?t.h:window.innerHeight,r=t?t.w:window.innerWidth,o=window.devicePixelRatio;e.width=r*o,e.height=n*o,e.style.width=r+"px",e.style.height=n+"px";var i=e.getContext("2d");i.scale(o,o);var a=u(0,0,e.width/o,e.height/o);function c(e){return{translateX:function(t){return e?Math.floor(t+e.x):Math.floor(t)},translateY:function(t){return e?Math.floor(t+e.y):Math.floor(t)}}}function l(e,t){e&&(i.fillStyle=e,i.fill()),t&&(i.strokeStyle=t.color,i.lineWidth=t.width,i.stroke())}function f(e,t,n,r){var o=c(r);i.beginPath(),i.rect(o.translateX(e.x),o.translateY(e.y),e.w,e.h),l(t,n),i.closePath()}return{drawRect:f,drawCircle:function(e,t,n,r){var o=c(r);i.beginPath(),i.arc(o.translateX(e.x),o.translateY(e.y),e.diameter,0,2*Math.PI,!1),l(t,n),i.closePath()},drawText:function(e,t,n,r){var o=c(r);i.font=n||"50px serif",i.fillStyle="#333",i.fillText(t,o.translateX(e.x),o.translateY(e.y)),i.closePath()},drawPath:function(e,t,n,r){var o=c(r);i.beginPath(),i.moveTo(o.translateX(e[0].x),o.translateY(e[0].y)),i.lineWidth=t||10,i.lineCap="round",i.strokeStyle=n||"#333",e.forEach((function(e){i.lineTo(o.translateX(e.x),o.translateY(e.y))})),i.stroke(),i.closePath()},drawImage:function(e,t){var n=c(t),r=s(u(0,0,e.naturalWidth,e.naturalHeight)).scale(1/o);i.drawImage(e,n.translateX(0),n.translateY(0),r.w,r.h)},fill:function(e){f(a,e)},clear:function(){i.clearRect(a.x,a.y,a.w,a.h)},context:i,canvas:e,inFrame:function(e){return s(a).inFrame(e)},dimensions:a,toDataUrl:function(){return e.toDataURL("image/png")}}}var d,p=60,m=function(){return p},y=function(){return v(400)};function v(e){return e/m()}function w(e){var t={p:function(t,n,r){var o=t;e.drawPath(o[1].map((function(e){return{x:e[0],y:e[1]}})),o[3],r||o[2],n)},r:function(t,n,r){var o=t;e.drawRect(o[1],r||o[2],r?null:o[3]||null,n)},c:function(t,n,r){var o=t;e.drawCircle(o[1],r||o[2],r?null:o[3]||null,n)}};function n(e,n,r){e.forEach((function(e){var o=t[e[0]];o?o(e,n,r):console.error("failed to render layout, is layoutData correctly formed?")}))}return function(t,r,o){if(t instanceof HTMLImageElement)return i=t,a=r,void e.drawImage(i,a);var i,a;o&&o.showShadow&&n(t.layoutData,l(r.x,r.y+20),"rgba(80, 80, 80, 0.1)"),n(t.layoutData,r),o&&o.healthDisplay&&t.frame&&function(e,t,r){var o=l(t.x,e.position===d.ABOVE?t.y-19:t.y+r.h+4);n(c(e.initial/2).map((function(t,n){var r=e.current-2*(n+1);return["c",{x:15*n,y:0,diameter:5},r>1?"#2E7D32":"transparent",{width:3,color:r>=0?"#2E7D32":"#c62828"}]})),o)}(o.healthDisplay,r,t.frame)}}!function(e){e.ABOVE="ABOVE",e.BELOW="BELOW",e.LEFT="LEFT",e.RIGHT="RIGHT"}(d||(d={}));var g,b=[],A={ArrowUp:"up",ArrowDown:"down",ArrowLeft:"left",ArrowRight:"right"," ":"fire"};function O(e){return b.push(e),function(){var t=b.indexOf(e);b.splice(t,1)}}window.addEventListener("keydown",(function(e){b.forEach((function(t){t("keydown",e)}))})),window.addEventListener("keyup",(function(e){b.forEach((function(t){t("keyup",e)}))})),window.addEventListener("keypress",(function(e){b.forEach((function(t){t("keypress",e)}))})),function(e){e[e.keyboard=0]="keyboard",e[e.randomLinearLeftRight=1]="randomLinearLeftRight",e[e.scrollDown=2]="scrollDown"}(g||(g={}));var x,_=function(e,t,n){var r=t>n/2?n-t:t,o=Math.floor(Math.min(t/n*10,9));return[["c",{x:e.w/2,y:e.h/3,diameter:Math.min(e.h/2,Math.max(10,2.8*r))},"#E".concat(o).concat(Math.max(o-1,1)),{width:4,color:"#F".concat(o).concat(o)}],["c",{x:e.w/2-e.w/4,y:e.h/3+5,diameter:Math.min(e.h-e.h/4,Math.max(5,.8*r))},"#E65",{width:4,color:"#F99"}],["c",{x:e.w/2+e.w/4,y:e.h/3-5,diameter:Math.min(e.h-e.h/4,Math.max(2,1.6*r))},"#E65",{width:4,color:"#F99"}]]};function E(e,t,n){return function(r,o){var i=r.layout.frame,c=f(o).toRect(i.w,i.h),l=r.health,h=null;r.movementType===g.keyboard&&(h=O((function(e,t){if("keypress"===e)return;var n=A[t.key];if(!n)return;"fire"===n?function(e){var t="keydown"===e;if(t===y)return;p=t,y=t,v=0}(e):function(e,t){var n=P[t];"keydown"===e&&(E[t]=n);"keyup"===e&&delete E[t]}(e,n)})));var p=!1,y=!1,v=0,w=m()/2,b=0,E={},j=u(0,0,e.w-i.w,e.h-i.h),C=u(-(i.w+1),-(i.h+1),e.w+2*i.w,e.h+2*i.h);r.stayWithinFrame||(j=u(-2*i.w,-2*i.h,e.w+4*i.w,e.h+4*i.h));var P={up:function(){return o.y=Math.max(o.y-r.speed(),0)},down:function(){return o.y=Math.min(o.y+r.speed(),j.h)},left:function(){return o.x=Math.max(o.x-r.speed(),0)},right:function(){return o.x=Math.min(o.x+r.speed(),j.w)}};function D(){r.movementType===g.scrollDown&&(Math.random()>.995&&l>0&&k());y&&(p?(k(),p=!1):v++),v>m()/8&&(p=!0,v=0)}function k(){r.weapons.forEach((function(e){e.locations.forEach((function(t){n({weapon:e.weapon,location:f(t).translate(o),direction:r.pointingDirection,team:r.team})}))}))}return r.movementType===g.scrollDown&&(E.down=P.down),{render:function(){var e,n;if(D(),(e=E,n=Object.keys(e||{}),{keys:n,values:n.map((function(t){return e[t]})),iterator:function(){return n.map((function(t){return{key:t,value:e[t]}}))}}).values.forEach((function(e){return e()})),c=f(o).toRect(i.w,i.h),l<=0)return t({layoutData:_(i,b,w)},o),void b++;t(r.preRendered||r.layout,o,{showShadow:!0,healthDisplay:{position:r.pointingDirection===x.DOWN?d.ABOVE:d.BELOW,current:l,initial:r.health}})},shouldRender:function(){return l>=0&&b<w&&s(C).inFrame(c)},team:r.team,hit:function(e,t){return!(t===r.team||l<=0)&&(!!s(c).inFrame(e)&&(l-=1,!0))},dispose:function(){a(h)&&h()}}}}function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){P(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.UP="UP",e.DOWN="DOWN",e.LEFT="LEFT",e.RIGHT="RIGHT"}(x||(x={}));var D=document.getElementById("scratch-pad"),k=function(e){console.log("rendering");var t=C(C({},e.frame),{},{h:e.frame.h+20}),n=h(D,t);w(n)(e,l(0,0),{showShadow:!0});var r=n.toDataUrl();n.clear();var o=new Image;return o.src=r,o},F=[["p",[[0,0],[0,10]],"#5AF",6],["p",[[0,2],[0,6]],"#00F",3]],S={speed:900,power:50,layout:F,preRendered:k({layoutData:F,frame:u(0,0,20,30)}),hitLayout:function(e){return[["c",{x:0,y:5,diameter:Math.floor(e/1.2)},"#FA5",{width:1,color:"#F88"}]]}},T=[["r",{x:0,y:20,w:80,h:21},"#666",{width:2,color:"#777"}],["p",[[8,8],[8,47]],"#777",7],["p",[[8,10],[8,45]],"#555",3],["p",[[72,8],[72,47]],"#777",8],["p",[[72,10],[72,45]],"#555",3],["p",[[32,40],[39,2],[40,2],[41,2],[48,40]],"#555",10],["p",[[40,10],[40,20]],"#AAA",5],["c",{x:40,y:42.5,diameter:10},"#777",{width:4,color:"#555"}],["c",{x:40,y:42.5,diameter:5},"#45E",{width:2,color:"#4555E9"}]];function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var R={frame:u(0,0,80,55),layoutData:T},N=k(R);function W(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){L(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({team:"blue",layout:R,preRendered:N,speed:y,weapons:[{weapon:S,locations:[l(7,0),l(73,0)]}],shootingPattern:"manual",health:10,movementType:g.keyboard,pointingDirection:x.UP,stayWithinFrame:!0},e||{})}function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){U(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Y=[["r",{x:0,y:15,w:50,h:5},"#755",{width:4,color:"#866"}],["c",{x:25,y:17.5,diameter:50/3.5},"#944",{width:4,color:"#844"}],["p",[[50,0],[50,35]],"#755",7],["p",[[0,0],[0,35]],"#755",7]];function H(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function X(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z={frame:u(0,0,50,35),layoutData:Y},V=k(z);function G(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?H(Object(n),!0).forEach((function(t){X(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):H(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({team:"red",layout:z,preRendered:V,speed:function(){return y()/4},weapons:[{weapon:S,locations:[l(7,0),l(43,0)]}],health:4,shootingPattern:"ai",movementType:g.scrollDown,pointingDirection:x.DOWN,stayWithinFrame:!1},e||{})}var $=[["c",{x:22.5,y:15,diameter:12},"#944",{width:4,color:"#844"}],["p",[[5,15],[21.5,28],[22.5,38],[23.5,28],[40,15]],"#555",10]];function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var J={frame:u(0,0,45,45),layoutData:$},K=k(J);function Q(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){Z(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({team:"red",layout:J,preRendered:K,speed:function(){return y()/4},weapons:[{weapon:S,locations:[l(22.5,20)]}],health:1,shootingPattern:"ai",movementType:g.scrollDown,pointingDirection:x.DOWN,stayWithinFrame:!1},e||{})}function ee(e,t){var n=Q({health:2}),r=n.layout.frame.h,o=G(),i=o.layout.frame.h;return{waves:c(20).map((function(a,c){return c%2==0?{pieces:[e(n,l(t.w/2,-r)),e(n,l(t.w/2-60,-r)),e(n,l(t.w/2+60,-r))],durationInSeconds:3}:{pieces:[e(o,l(t.w/2,-i)),e(o,l(t.w/2-120,-i)),e(o,l(t.w/2+120,-i))],durationInSeconds:6}}))}}function te(e,t,n){var r=0,o=[],i=w(e),a=(w(t),E(e.dimensions,i,(function(e){o.push(e)}))),c=function(e,t,n){return function(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return r.reduce((function(r,i){if(i.hit)return i.hit.framesShown++,i.hit.framesShown>Math.floor(m()/6)||(r.push(i),t({layoutData:i.weapon.hitLayout(i.hit.framesShown)},i.hit.location)),r;var a={x:i.location.x,y:i.direction===x.DOWN?i.location.y+v(i.weapon.speed):i.location.y-v(i.weapon.speed)};if(!s(e).inFrame(a))return r;var c=I(I({},i),{},{location:a});return o.some((function(e){return e.hit(a,i.team)}))&&(c.hit={framesShown:0,location:a},n(i.team,1)),r.push(c),c.hit?t({layoutData:c.hit?i.weapon.hitLayout(1):i.weapon.layout},a):t(i.weapon.preRendered||{layoutData:i.weapon.layout},a),r}),[])}}(e.dimensions,i,(function(e,t){h.team===e&&(h.hits+=t,n.setScore(5*h.hits))})),u=l(e.dimensions.w/2-25,e.dimensions.h-100),f=a(W(),u),h={team:f.team,hits:0},d=[ee(a,e.dimensions),ee(a,e.dimensions),ee(a,e.dimensions)],p=function(e,t){var n=e.dimensions,r=0,o=n.w/4;return{nextTick:function(){r++,e.clear(),e.fill("#81bc5c"),e.drawPath([l(n.w/2,0),l(n.w/2,n.h)],o,"#4d9bba"),r>n.h&&(r=0),e.fill("rgba(200,200,200, 0.5")}}}(t),y=-1,g=null,b=null,A=[];function O(){p.nextTick(),y++,(g=d[y])?(n.setMessage("Level ".concat(y+1),5),b={index:0,wave:g.waves[0]},A=A.concat(b.wave.pieces)):n.won()}return O(),{nextTick:function(){if((r+=1/m())>b.wave.durationInSeconds){if(b={index:b.index+1,wave:g.waves[b.index+1]},r=0,!b.wave)return void O();A=A.concat(b.wave.pieces)}f.shouldRender()||n.gameOver(),e.clear(),f.render(),(A=A.filter((function(e){return e.shouldRender()}))).forEach((function(e){return e.render()})),o=c(o,A.concat(f))},dispose:function(){f.dispose(),A=[]}}}var ne=o.$,re=function(){var e=o.$("#gameplay"),t=o.$("#background");!function(e,t){var n={gameOver:function(){r="Game Over",c(),setTimeout(a,1e4)},won:function(){r="You WIN!!!!",c(),setTimeout(a,1e4)},setScore:function(e){ne(".game-score").innerText="Score: ".concat(e)},setMessage:function(e,t){r=e,o=t*m(),console.log("pause duration: ",o)}},r=null,o=0,i=te(e,t,n),a=function(){i=te(e,t,n),r=null},c=function(){i&&(i.dispose(),i=null)};O((function(e,t){"Escape"===t.key&&a()}));var u=Date.now(),s=function(e){p=e,Date.now()-3e3>u&&(u=Date.now(),ne(".game-fps").innerText="fps: ".concat(e))},f=Date.now(),h=[];requestAnimationFrame((function t(n){var a=n-f;f=n;var c=1e3/a;if(s(Math.floor(c)),r&&(e.clear(),e.drawText(l(e.dimensions.w/2-140,e.dimensions.h/2),r,"55px Arial Bold")),requestAnimationFrame(t),i)if(o>0)0===--o&&(r=null);else{var u=performance.now();i.nextTick();var d=performance.now();h.push(d-u),h.length>1e3&&(console.log("aveTickDuration",h.reduce((function(e,t,n,r){return e+t/r.length}),0)),h=[])}}))}(h(e),h(t))}},function(e,t,n){"use strict";n.r(t),function(e){var t=n(2);n(5);"DEVELOPMENT"!==e.env&&("serviceWorker"in navigator?navigator.serviceWorker.register("./sw.js").then((function(e){console.log("Service worker registration succeeded:",e)})).catch((function(e){console.log("Service worker registration failed:",e)})):console.log("Service workers are not supported.")),Object(t.a)()}.call(this,n(4))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var e=c(h);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new p(e,t)),1!==s.length||l||c(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){var r=n(6),o=n(7);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],s=n[u]||0,l="".concat(u," ").concat(s);n[u]=s+1;var f=c(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(h)):a.push({identifier:l,updater:y(h,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function h(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,m=0;function y(e,t){var n,r,o;if(t.singleton){var i=m++;n=p||(p=s(t)),r=h.bind(null,n,i,!1),o=h.bind(null,n,i,!0)}else n=s(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(e,t),s=0;s<n.length;s++){var l=c(n[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r)()(!0);o.push([e.i,"* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n","",{version:3,sources:["webpack://styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;AACX;AACA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,OAAO;EACP,MAAM;EACN,cAAc;EACd,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,WAAW;EACX,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,UAAU;EACV,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n"],sourceRoot:""}]),t.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
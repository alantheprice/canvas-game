!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e){var n=function(t){return Object.keys(t||{})},r=function(t){return function(e){return typeof e===t}},o=r("string"),i=r("boolean"),a=r("function"),c=r("object"),u=r("undefined"),l=function(t){return Array.isArray(t)},s=function(t){return null==t};function f(){return Object.assign.apply(null,Array.from(arguments))}function p(t){throw new Error(t)}var h,d=["element","handle","_pe","_pc","_rc","_se","_e","_i","_rt"],y=function t(e,r){if(s(e)&&s(r))return!0;if(s(e)||s(r))return!1;if(typeof e!=typeof r)return!1;if(a(e))return!0;if(l(e))return l(r)&&e.length===r.length&&e.reduce((function(e,n,o){return e&&t(n,r[o])}),!0);if(c(e)){var o=m(e,r);return n(e).reduce((function(t,e){return t&&o(e)}),!0)}return e===r},m=function(t,e){return function(n){return!!(d.includes(n)||s(t)&&s(e))||!s(t)&&!s(e)&&y(t[n],e[n])}},v={class:"className"},b="textContent|innerText|innerHTML|className|value|style|checked|selected|src|srcdoc|srcset|tabindex|target".split("|").reduce((function(t,e){return t[e]=1,t}),{}),w={},g=function(t){return function(){this._lF(["onWillRemove"]),this._rc.forEach((function(t){return t._rmF()})),t[this.handle]=null;var e=this._pe;this._se&&this._se.forEach((function(t){return t()})),this.element&&e&&e!==this.element&&e.removeChild(this.element),this.element=null,this._pc=null,this._pe=null}}(w),A={debug:!1},O=function(t,e){return function(){var n=[].slice.call(arguments);return A.debug&&console.log(e+" called with context: ",this,"args",n),t.apply(this,n)}},x=((h={})._aF=O((function(t){this._pe=t;var e=this.tagName?this.element:this._pe;return e||(e=document.createElementNS(this._ns||"http://www.w3.org/1999/xhtml",this.tagName),t.appendChild(e)),e}),"attach"),h._aelF=O((function(t,e){var n=this;if(!this._v){var r=function(t){e.apply(n,[t,o,n])},o=this.element;return o.addEventListener(t,r),function(){return o.removeEventListener(t,r)}}}),"addEventListener"),h._saF=O((function(){var t=this;this._v||((this._se||[]).forEach((function(t){return t()})),n(this.data).forEach((function(e){var n=t.data[e];if("on"===e.slice(0,"on".length))return t._se=t._se||[],void t._se.push(t._aelF(e.slice(2),n));!function(t,e,n,r){if("children"!==e){if("ref"===e||"_ns"===e)return n(t,r);var o=v[e]||e;b[o]||i(n)?t[o]=n:t.setAttribute(o,n)}}(t.element,e,n,t)})))}),"setAttribute"),h._rcF=O((function(t,e){var n=this;if(a(this.content)){var r=f({},this.data,{children:(this._e||{}).children});this.data.children=[this.content(r,(function(t){return n.update(t)}))]}var o=this._rc,i=this.data.children.filter((function(t){return null!=t})).map((function(n,r){n._rF||p("child must have render function");var i=function(t){return o?o[t]:null}(r);if(!i)return n.mount(t,e);var a=i._ccF(n),c=a.reusable;return a.identical&&i._v?(o[r]=void 0,i):c?(o[r]=void 0,i._lF(["onDataUpdated",i._e,n._e])&&i._dcF(n._e),i):n.mount(t,e)}));return o&&o.forEach((function(t){t&&t._rmF&&t._rmF()})),i}),"renderChildren"),h._rF=O((function(t,e){var n=this,r=this._aF(t);this._pc=e,this.element=this._v?null:r;var o=[this.element,this.data,function(t){return n.update(t)},this];return this._lF(["onAttach"].concat(o)),this._rc=this._rcF(r,this._v?this:e),this._saF(),this._lF(["onRender"].concat(o)),this}),"render"),h._rmF=O(g,"remove"),h._ccF=O((function(t){var e=m(this.data,t.data);return{identical:n(this.data).reduce((function(t,n){return t&&e(n)}),!0),reusable:this.tagName?m(this,t)("tagName"):y(this._rt,t._rt)}}),"compare"),h._lF=O((function(t){var e=this[t[0]];if(e){var n=e.apply(this,t.slice(1));if(!u(n))return n}return!0}),"commitLifecyleEvent"),h._dcF=O((function(t){this._sdF(this._i,t);var e=this._lF(["onDataChange",this.data,t]);c(e)&&(console.log("data is dataOverride",e),this.data=e),this._saF(),this._cF(this)}),"dataDidChange"),h._sdF=O((function(t,e){this._e=f({},e),this._i=f({},t),this.data=f({},this._i,this._e)}),"setData"),h._cF=O((function(t){t._rc=t._rcF(t.element||t._pe,t)}),"commitUpdate"),h.update=O((function(t){var e=this,r=t,o=!1,i=!1,c={};a(this.updateReducer)&&(r=this.updateReducer(this.data,t)),this.data=n(r).reduce((function(t,n){return t[n]!==r[n]&&(u(e._e[n])?(o=!0,e._i[n]=r[n],t[n]=r[n]):(i=!0,c[n]=r[n])),t}),this.data),i&&this._pc&&this._pc.update(c),o&&!i&&setTimeout((function(){e._cF(e)}),0)}),"update"),h.mount=O((function(t,e){var n=this._rF(t,e);return this.handle=this.handle||this.data.id||Symbol(n.tagName||"v"),n.element&&(n.element._rmF=n._rmF),w[this.handle]=n,n}),"mount"),h),S=function(t,e){this._sdF(e,t),this._v=!0},j=function(t,e,n){var r=new S(t);return r.tagName=e,r._v=!1,f(r,n)},E=function(t,e,n){return f(new S(t,e),n)};n(x).forEach((function(t){return S.prototype[t]=x[t]}));var _=function(t){t.tagName||t._c||p("tagName or Component must be defined");var e=Symbol("rt"),n=function(){var e,n=[].slice.call(arguments),r=n[0]||{},i=n.slice(1);l(n[0])?(i=n[0],r={}):o(n[0])?r={textContent:n[0]}:(n[0]||{})._rF&&(i.unshift(n[0]),r={}),o(i[0])&&(r.textContent=i[0],i=i.slice(1)),l(i[0])&&(i=i[0]);var a=f({},r,((e={}).children=i,e));return o(t.tagName)?j(a,t.tagName,t._o):t._c.prototype instanceof S?new t._c(a,t._i):E(a,t._i,f({},t._o,{content:t._c}))};return function(){var t=n.apply(void 0,[].slice.call(arguments));return t._rt=e,t}};window.eleMint={handles:w,config:A},e.Component=S,e.register=function(t,e){var n;return _(((n={}).tagName=t,n._o=e,n))},e.registerComponent=function(t,e,n){var r;return _(((r={})._c=t,r._i=e,r._o=n,r))},e.registerSVG=function(t){var e,n;return _(((n={}).tagName=t,n._o=((e={})._ns="http://www.w3.org/2000/svg",e),n))}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}var a,c,u;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},function(t,e,n){"use strict";n.d(e,"a",(function(){return gt}));n(0);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o={$:function(t){return document.querySelector(t)},$$:function(t){return Array.from(document.querySelectorAll(t))}};var i=function(t){return function(e){return r(e)===t}},a=(i("string"),i("boolean"),i("function"));i("object"),i("undefined");function c(t){return new Array(Math.floor(t)).join(",").split(",")}function u(t,e,n,r){return{x:t,y:e,w:n,h:r||n}}function l(t){var e=t;return{getPoint:function(){return s(e.x,e.y)},setPoint:function(t){e.x=t.x,e.y=t.y},shrink:function(t){return u(e.x+t,e.y+t,e.w-2*t,e.h-2*t)},expand:function(t){return u(e.x-t,e.y-t,e.w+2*t,e.h+2*t)},circle:function(t){return t||(t=Math.min(e.w,e.h)/2),function(t,e,n){return{x:t,y:e,diameter:n}}(e.x+e.w/2,e.y+e.h/2,t)},inFrame:function(t){return t.x>=e.x&&t.y>=e.y&&t.y<=e.y+e.h&&t.x<=e.x+e.w},scale:function(t){return u(e.x,e.y,e.w*t,e.h*t)}}}function s(t,e){return{x:t,y:e}}function f(t){return{toRect:function(e,n){return u(t.x,t.y,e,n)},translate:function(e){return s(e.x+t.x,e.y+t.y)}}}function p(t,e){var n=e?e.h:window.innerHeight,r=e?e.w:window.innerWidth,o=window.devicePixelRatio;t.width=r*o,t.height=n*o,t.style.width=r+"px",t.style.height=n+"px";var i=t.getContext("2d");i.scale(o,o);var a=u(0,0,t.width/o,t.height/o);function c(t){return{translateX:function(e){return t?Math.floor(e+t.x):Math.floor(e)},translateY:function(e){return t?Math.floor(e+t.y):Math.floor(e)}}}function s(t,e){t&&(i.fillStyle=t,i.fill()),e&&(i.strokeStyle=e.color,i.lineWidth=e.width,i.stroke())}function f(t,e,n,r){var o=c(r);i.beginPath(),i.rect(o.translateX(t.x),o.translateY(t.y),t.w,t.h),s(e,n),i.closePath()}return{drawRect:f,drawCircle:function(t,e,n,r){var o=c(r);i.beginPath(),i.arc(o.translateX(t.x),o.translateY(t.y),t.diameter,0,2*Math.PI,!1),s(e,n),i.closePath()},drawText:function(t,e,n,r){var o=c(r);i.font=n||"50px serif",i.fillStyle="#333",i.fillText(e,o.translateX(t.x),o.translateY(t.y)),i.closePath()},drawPath:function(t,e,n,r){var o=c(r);i.beginPath(),i.moveTo(o.translateX(t[0].x),o.translateY(t[0].y)),i.lineWidth=e||10,i.lineCap="round",i.strokeStyle=n||"#333",t.forEach((function(t){i.lineTo(o.translateX(t.x),o.translateY(t.y))})),i.stroke(),i.closePath()},drawImage:function(t,e){var n=c(e),r=l(u(0,0,t.naturalWidth,t.naturalHeight)).scale(1/o);i.drawImage(t,n.translateX(0),n.translateY(0),r.w,r.h)},fill:function(t){f(a,t)},clear:function(){i.clearRect(a.x,a.y,a.w,a.h)},context:i,canvas:t,inFrame:function(t){return l(a).inFrame(t)},dimensions:a,toDataUrl:function(){return t.toDataURL("image/png")}}}var h=60,d=function(){return h},y=function(){return m(400)};function m(t){return t/d()}var v,b="#2E7D32",w="#c62828",g="transparent";function A(t){var e={p:function(e,n,r){var o=e;t.drawPath(o[1].map((function(t){return{x:t[0],y:t[1]}})),o[3],r||o[2],n)},r:function(e,n,r){var o=e;t.drawRect(o[1],r||o[2],r?null:o[3]||null,n)},c:function(e,n,r){var o=e;t.drawCircle(o[1],r||o[2],r?null:o[3]||null,n)}};function n(t,n,r){t.forEach((function(t){var o=e[t[0]];o?o(t,n,r):console.error("failed to render layout, is layoutData correctly formed?")}))}return function(e,r,o){var i,a,u=function(){o&&o.healthDisplay&&function(t,e,r){var o=s(e.x,t.position===v.ABOVE?e.y-10:e.y+r.h+4),i=(c(t.initial/10).map((function(e,n){var r=t.current-2*(n+1);return["c",{x:15*n,y:0,diameter:5},r>1?b:g,{width:2,color:r>=0?b:w}]})),Math.floor(r.w*(t.current/t.initial)));n([["r",{x:0,y:0,w:r.w,h:6},g,{width:1,color:b}],["r",{x:0,y:0,w:i,h:6},b]],o)}(o.healthDisplay,r,e.layout.frame)};if(e.preRendered instanceof HTMLImageElement)return i=e.preRendered,a=r,t.drawImage(i,a),void u();o&&o.showShadow&&n(e.layout.layoutData,s(r.x,r.y+20),"rgba(80, 80, 80, 0.1)"),n(e.layout.layoutData,r),u()}}!function(t){t.ABOVE="ABOVE",t.BELOW="BELOW",t.LEFT="LEFT",t.RIGHT="RIGHT"}(v||(v={}));var O,x=[],S={ArrowUp:"up",ArrowDown:"down",ArrowLeft:"left",ArrowRight:"right"," ":"fire"};function j(t){return x.push(t),function(){var e=x.indexOf(t);x.splice(e,1)}}window.addEventListener("keydown",(function(t){x.forEach((function(e){e("keydown",t)}))})),window.addEventListener("keyup",(function(t){x.forEach((function(e){e("keyup",t)}))})),window.addEventListener("keypress",(function(t){x.forEach((function(e){e("keypress",t)}))})),function(t){t[t.keyboard=0]="keyboard",t[t.randomLinearLeftRight=1]="randomLinearLeftRight",t[t.scrollDown=2]="scrollDown"}(O||(O={}));var E,_=function(t,e,n){var r=e>n/2?n-e:e,o=Math.floor(Math.min(e/n*10,9));return[["c",{x:t.w/2,y:t.h/3,diameter:Math.min(t.h/2,Math.max(10,2.8*r))},"#E".concat(o).concat(Math.max(o-1,1)),{width:4,color:"#F".concat(o).concat(o)}],["c",{x:t.w/2-t.w/4,y:t.h/3+5,diameter:Math.min(t.h-t.h/4,Math.max(5,.8*r))},"#E65",{width:4,color:"#F99"}],["c",{x:t.w/2+t.w/4,y:t.h/3-5,diameter:Math.min(t.h-t.h/4,Math.max(2,1.6*r))},"#E65",{width:4,color:"#F99"}]]};function P(t,e,n){return function(r,o){var i=r.layout.frame,c=f(o).toRect(i.w,i.h),s=r.health,p=null;r.movementType===O.keyboard&&(p=j((function(t,e){if("keypress"===t)return;var n=S[e.key];if(!n)return;"fire"===n?function(t){var e="keydown"===t;if(e===y)return;h=e,y=e,m=0}(t):function(t,e){var n=P[e];"keydown"===t&&(g[e]=n);"keyup"===t&&delete g[e]}(t,n)})));var h=!1,y=!1,m=0,b=d()/2,w=0,g={},A=u(0,0,t.w-i.w,t.h-i.h),x=u(-(i.w+1),-(i.h+1),t.w+2*i.w,t.h+2*i.h);r.stayWithinFrame||(A=u(-2*i.w,-2*i.h,t.w+4*i.w,t.h+4*i.h));var P={up:function(){return o.y=Math.max(o.y-r.speed(),0)},down:function(){return o.y=Math.min(o.y+r.speed(),A.h)},left:function(){return o.x=Math.max(o.x-r.speed(),0)},right:function(){return o.x=Math.min(o.x+r.speed(),A.w)}};function D(){r.movementType===O.scrollDown&&(Math.random()>.995&&s>0&&C());y&&(h?(C(),h=!1):m++),m>d()/8&&(h=!0,m=0)}function C(){r.weapons.forEach((function(t){t.locations.forEach((function(e){n({weapon:t.weapon,location:f(e).translate(o),direction:r.pointingDirection,team:r.team})}))}))}return r.movementType===O.scrollDown&&(g.down=P.down),{render:function(){var t,n;if(D(),(t=g,n=Object.keys(t||{}),{keys:n,values:n.map((function(e){return t[e]})),iterator:function(){return n.map((function(e){return{key:e,value:t[e]}}))}}).values.forEach((function(t){return t()})),c=f(o).toRect(i.w,i.h),s<=0)return e({layout:{layoutData:_(i,w,b)}},o),void w++;e(r,o,{showShadow:!0,healthDisplay:{position:r.pointingDirection===E.DOWN?v.ABOVE:v.BELOW,current:s,initial:r.health}})},shouldRender:function(){return s>=0&&w<b&&l(x).inFrame(c)},team:r.team,hit:function(t,e){return!(e===r.team||s<=0)&&(!!l(c).inFrame(t)&&(s-=1,!0))},dispose:function(){a(p)&&p()}}}}function D(t){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function C(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function T(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?C(Object(n),!0).forEach((function(e){k(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function k(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==D(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===D(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}!function(t){t.UP="UP",t.DOWN="DOWN",t.LEFT="LEFT",t.RIGHT="RIGHT"}(E||(E={}));var F=document.getElementById("scratch-pad"),M=function(t){console.log("rendering");var e=T(T({},t.frame),{},{h:t.frame.h+20}),n=p(F,e);A(n)({layout:t},s(0,0),{showShadow:!0});var r=n.toDataUrl();n.clear();var o=new Image;return o.src=r,o},R=[["p",[[0,0],[0,10]],"#5AF",6],["p",[[0,2],[0,6]],"#00F",3]],L={speed:900,power:50,layout:R,preRendered:M({layoutData:R,frame:u(0,0,20,30)}),hitLayout:function(t){return[["c",{x:0,y:5,diameter:Math.floor(t/1.2)},"#FA5",{width:1,color:"#F88"}]]}},N=[["r",{x:0,y:20,w:80,h:21},"#666",{width:2,color:"#777"}],["p",[[8,8],[8,47]],"#777",7],["p",[[8,10],[8,45]],"#555",3],["p",[[72,8],[72,47]],"#777",8],["p",[[72,10],[72,45]],"#555",3],["p",[[32,40],[39,2],[40,2],[41,2],[48,40]],"#555",10],["p",[[40,10],[40,20]],"#AAA",5],["c",{x:40,y:42.5,diameter:10},"#777",{width:4,color:"#555"}],["c",{x:40,y:42.5,diameter:5},"#45E",{width:2,color:"#4555E9"}]],W=[["c",{x:6,y:15,diameter:12/3.14},"#944",{width:4,color:"#844"}],["r",{x:3,y:30,w:6,h:30},"#755",{width:4,color:"#866"}]],B={speed:900,power:50,layout:W,preRendered:M({layoutData:W,frame:u(0,0,20,30)}),hitLayout:function(t){return[["c",{x:0,y:5,diameter:Math.floor(t/1.2)},"#FA5",{width:1,color:"#F88"}]]}};function I(t){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function U(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Y(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==I(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!==I(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===I(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var H={frame:u(0,0,80,55),layoutData:N},X=M(H);function z(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?U(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):U(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({team:"blue",layout:H,preRendered:X,speed:y,weapons:[{weapon:L,locations:[s(7,0),s(73,0)]},{weapon:B,locations:[s(9,0),s(71,0)]}],shootingPattern:"manual",health:10,movementType:O.keyboard,pointingDirection:E.UP,stayWithinFrame:!0},t||{})}function V(t){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function G(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function $(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?G(Object(n),!0).forEach((function(e){q(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):G(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function q(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==V(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!==V(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===V(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Z=[["r",{x:0,y:15,w:100,h:40},"#755",{width:4,color:"#866"}],["c",{x:50,y:35,diameter:100/3.5},"#944",{width:4,color:"#844"}],["p",[[100,0],[100,70]],"#755",7],["p",[[0,0],[0,70]],"#755",7]];function J(t){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function K(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Q(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==J(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!==J(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===J(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var tt={frame:u(0,0,100,70),layoutData:Z},et=M(tt);function nt(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?K(Object(n),!0).forEach((function(e){Q(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({team:"red",layout:tt,preRendered:et,speed:function(){return y()/9},weapons:[{weapon:L,locations:[s(7,3),s(93,0),s(50,0)]}],health:120,shootingPattern:"ai",movementType:O.scrollDown,pointingDirection:E.DOWN,stayWithinFrame:!1},t||{})}var rt=[["r",{x:0,y:15,w:50,h:5},"#755",{width:4,color:"#866"}],["c",{x:25,y:17.5,diameter:50/3.5},"#944",{width:4,color:"#844"}],["p",[[50,0],[50,35]],"#755",7],["p",[[0,0],[0,35]],"#755",7]];function ot(t){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function it(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function at(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==ot(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!==ot(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ot(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ct={frame:u(0,0,50,35),layoutData:rt},ut=M(ct);function lt(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?it(Object(n),!0).forEach((function(e){at(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):it(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({team:"red",layout:ct,preRendered:ut,speed:function(){return y()/5},weapons:[{weapon:L,locations:[s(7,0),s(43,0)]}],health:4,shootingPattern:"ai",movementType:O.scrollDown,pointingDirection:E.DOWN,stayWithinFrame:!1},t||{})}var st=[["c",{x:22.5,y:15,diameter:12},"#944",{width:4,color:"#844"}],["p",[[5,15],[21.5,28],[22.5,38],[23.5,28],[40,15]],"#555",10]];function ft(t){return(ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function pt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ht(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==ft(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!==ft(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ft(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var dt={frame:u(0,0,45,45),layoutData:st},yt=M(dt);function mt(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?pt(Object(n),!0).forEach((function(e){ht(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):pt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({team:"red",layout:dt,preRendered:yt,speed:function(){return y()/3},weapons:[{weapon:L,locations:[s(22.5,20)]}],health:1,shootingPattern:"ai",movementType:O.scrollDown,pointingDirection:E.DOWN,stayWithinFrame:!1},t||{})}function vt(t,e){var n=mt({health:2}),r=n.layout.frame.h,o=lt(),i=o.layout.frame.h;return{waves:c(7).map((function(a,c){return 6===(u=c)?{pieces:[t(nt(),s(e.w/2,-70))],durationInSeconds:15}:u%2==0?{pieces:(f=e.w/5,[t(n,s(f,-r)),t(n,s(2*f,-r)),t(n,s(3*f,-r)),t(n,s(4*f,-r))]),durationInSeconds:3}:{pieces:(l=e.w/4,[t(o,s(l,-i)),t(o,s(2*l,-i)),t(o,s(3*l,-i))]),durationInSeconds:6};var u,l,f}))}}function bt(t,e,n){var r=0,o=[],i=A(t),a=(A(e),P(t.dimensions,i,(function(t){o.push(t)}))),c=function(t,e,n){return function(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return r.reduce((function(r,i){if(i.hit)return i.hit.framesShown++,i.hit.framesShown>Math.floor(d()/6)||(r.push(i),e({layout:{layoutData:i.weapon.hitLayout(i.hit.framesShown)}},i.hit.location)),r;var a={x:i.location.x,y:i.direction===E.DOWN?i.location.y+m(i.weapon.speed):i.location.y-m(i.weapon.speed)};if(!l(t).inFrame(a))return r;var c=$($({},i),{},{location:a});return o.some((function(t){return t.hit(a,i.team)}))&&(c.hit={framesShown:0,location:a},n(i.team,1)),r.push(c),c.hit?e({layout:{layoutData:c.hit?i.weapon.hitLayout(1):i.weapon.layout}},a):e({preRendered:i.weapon.preRendered,layout:{layoutData:i.weapon.layout}},a),r}),[])}}(t.dimensions,i,(function(t,e){p.team===t&&(p.hits+=e,n.setScore(5*p.hits))})),u=s(t.dimensions.w/2-25,t.dimensions.h-100),f=a(z(),u),p={team:f.team,hits:0},h=[vt(a,t.dimensions),vt(a,t.dimensions),vt(a,t.dimensions)],y=function(t,e){var n=t.dimensions,r=0,o=n.w/4;return{nextTick:function(){r++,t.clear(),t.fill("#81bc5c"),t.drawPath([s(n.w/2,0),s(n.w/2,n.h)],o,"#4d9bba"),r>n.h&&(r=0),t.fill("rgba(200,200,200, 0.5")}}}(e),v=-1,b=null,w=null,g=[];function O(){y.nextTick(),v++,(b=h[v])?(n.setMessage("Level ".concat(v+1),2),w={index:0,wave:b.waves[0]},g=g.concat(w.wave.pieces)):n.won()}return O(),{nextTick:function(){if((r+=1/d())>w.wave.durationInSeconds){if(w={index:w.index+1,wave:b.waves[w.index+1]},r=0,!w.wave)return void O();g=g.concat(w.wave.pieces)}f.shouldRender()||n.gameOver(),t.clear(),f.render(),(g=g.filter((function(t){return t.shouldRender()}))).forEach((function(t){return t.render()})),o=c(o,g.concat(f))},dispose:function(){f.dispose(),g=[]}}}var wt=o.$,gt=function(){var t=o.$("#gameplay"),e=o.$("#background");!function(t,e){var n={gameOver:function(){r="Game Over",u(),setTimeout(c,8e3)},won:function(){r="You WIN!!!!",u(),setTimeout(c,1e4)},setScore:function(t){wt(".game-score").innerText="Score: ".concat(t)},setMessage:function(t,e){r=t,o=e*d(),console.log("pause duration: ",o)}},r=null,o=0,i=!1,a=bt(t,e,n),c=function(){a=bt(t,e,n),r=null},u=function(){a&&(a.dispose(),a=null)};j((function(t,e){"Escape"===e.key&&c(),"p"===e.key&&(i=!i)}));var l=Date.now(),f=Date.now(),p=[],y=function(t){var e=t-f;f=t;var n=Math.floor(1e3/e);h=n,Date.now()-3e3>l&&(l=Date.now(),wt(".game-fps").innerText="fps: ".concat(n))};requestAnimationFrame((function e(n){if(y(n),(r||i)&&(t.clear(),t.drawText(s(t.dimensions.w/2-140,t.dimensions.h/2),r||"PAUSED, press 'p' to unpause","55px Arial Bold")),requestAnimationFrame(e),o>0)0===--o&&(r=null);else if(a&&!i){var c=performance.now();a.nextTick();var u=performance.now();p.push(u-c),p.length>1e3&&(console.log("aveTickDuration",p.reduce((function(t,e,n,r){return t+e/r.length}),0)),p=[])}}))}(p(t),p(e))}},function(t,e,n){"use strict";n.r(e),function(t){var e=n(2);n(5);"DEVELOPMENT"!==t.env&&("serviceWorker"in navigator?navigator.serviceWorker.register("./sw.js").then((function(t){console.log("Service worker registration succeeded:",t)})).catch((function(t){console.log("Service worker registration failed:",t)})):console.log("Service workers are not supported.")),Object(e.a)()}.call(this,n(4))},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,l=[],s=!1,f=-1;function p(){s&&u&&(s=!1,u.length?l=u.concat(l):f=-1,l.length&&h())}function h(){if(!s){var t=c(p);s=!0;for(var e=l.length;e;){for(u=l,l=[];++f<e;)u&&u[f].run();f=-1,e=l.length}u=null,s=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||s||c(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){var r=n(6),o=n(7);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function c(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function u(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],u=e.base?i[0]+e.base:i[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var f=c(s),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:s,updater:m(p,e),references:1}),r.push(s)}return r}function l(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var s,f=(s=[],function(t,e){return s[t]=e,s.filter(Boolean).join("\n")});function p(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=f(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function h(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,y=0;function m(t,e){var n,r,o;if(e.singleton){var i=y++;n=d||(d=l(e)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=l(e),r=h.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=u(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(t,e),l=0;l<n.length;l++){var s=c(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(t,e,n){"use strict";n.r(e);var r=n(1),o=n.n(r)()(!0);o.push([t.i,"* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n","",{version:3,sources:["webpack://styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;AACX;AACA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,OAAO;EACP,MAAM;EACN,cAAc;EACd,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,WAAW;EACX,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,UAAU;EACV,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n"],sourceRoot:""}]),e.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
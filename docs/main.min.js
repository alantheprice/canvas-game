!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e){var n=function(t){return Object.keys(t||{})},r=function(t){return function(e){return typeof e===t}},o=r("string"),i=r("boolean"),a=r("function"),c=r("object"),u=r("undefined"),s=function(t){return Array.isArray(t)},l=function(t){return null==t};function f(){return Object.assign.apply(null,Array.from(arguments))}function h(t){throw new Error(t)}var d,p=["element","handle","_pe","_pc","_rc","_se","_e","_i","_rt"],m=function t(e,r){if(l(e)&&l(r))return!0;if(l(e)||l(r))return!1;if(typeof e!=typeof r)return!1;if(a(e))return!0;if(s(e))return s(r)&&e.length===r.length&&e.reduce((function(e,n,o){return e&&t(n,r[o])}),!0);if(c(e)){var o=y(e,r);return n(e).reduce((function(t,e){return t&&o(e)}),!0)}return e===r},y=function(t,e){return function(n){return!!(p.includes(n)||l(t)&&l(e))||!l(t)&&!l(e)&&m(t[n],e[n])}},v={class:"className"},w="textContent|innerText|innerHTML|className|value|style|checked|selected|src|srcdoc|srcset|tabindex|target".split("|").reduce((function(t,e){return t[e]=1,t}),{}),b={},g=function(t){return function(){this._lF(["onWillRemove"]),this._rc.forEach((function(t){return t._rmF()})),t[this.handle]=null;var e=this._pe;this._se&&this._se.forEach((function(t){return t()})),this.element&&e&&e!==this.element&&e.removeChild(this.element),this.element=null,this._pc=null,this._pe=null}}(b),_={debug:!1},A=function(t,e){return function(){var n=[].slice.call(arguments);return _.debug&&console.log(e+" called with context: ",this,"args",n),t.apply(this,n)}},O=((d={})._aF=A((function(t){this._pe=t;var e=this.tagName?this.element:this._pe;return e||(e=document.createElementNS(this._ns||"http://www.w3.org/1999/xhtml",this.tagName),t.appendChild(e)),e}),"attach"),d._aelF=A((function(t,e){var n=this;if(!this._v){var r=function(t){e.apply(n,[t,o,n])},o=this.element;return o.addEventListener(t,r),function(){return o.removeEventListener(t,r)}}}),"addEventListener"),d._saF=A((function(){var t=this;this._v||((this._se||[]).forEach((function(t){return t()})),n(this.data).forEach((function(e){var n=t.data[e];if("on"===e.slice(0,"on".length))return t._se=t._se||[],void t._se.push(t._aelF(e.slice(2),n));!function(t,e,n,r){if("children"!==e){if("ref"===e||"_ns"===e)return n(t,r);var o=v[e]||e;w[o]||i(n)?t[o]=n:t.setAttribute(o,n)}}(t.element,e,n,t)})))}),"setAttribute"),d._rcF=A((function(t,e){var n=this;if(a(this.content)){var r=f({},this.data,{children:(this._e||{}).children});this.data.children=[this.content(r,(function(t){return n.update(t)}))]}var o=this._rc,i=this.data.children.filter((function(t){return null!=t})).map((function(n,r){n._rF||h("child must have render function");var i=function(t){return o?o[t]:null}(r);if(!i)return n.mount(t,e);var a=i._ccF(n),c=a.reusable;return a.identical&&i._v?(o[r]=void 0,i):c?(o[r]=void 0,i._lF(["onDataUpdated",i._e,n._e])&&i._dcF(n._e),i):n.mount(t,e)}));return o&&o.forEach((function(t){t&&t._rmF&&t._rmF()})),i}),"renderChildren"),d._rF=A((function(t,e){var n=this,r=this._aF(t);this._pc=e,this.element=this._v?null:r;var o=[this.element,this.data,function(t){return n.update(t)},this];return this._lF(["onAttach"].concat(o)),this._rc=this._rcF(r,this._v?this:e),this._saF(),this._lF(["onRender"].concat(o)),this}),"render"),d._rmF=A(g,"remove"),d._ccF=A((function(t){var e=y(this.data,t.data);return{identical:n(this.data).reduce((function(t,n){return t&&e(n)}),!0),reusable:this.tagName?y(this,t)("tagName"):m(this._rt,t._rt)}}),"compare"),d._lF=A((function(t){var e=this[t[0]];if(e){var n=e.apply(this,t.slice(1));if(!u(n))return n}return!0}),"commitLifecyleEvent"),d._dcF=A((function(t){this._sdF(this._i,t);var e=this._lF(["onDataChange",this.data,t]);c(e)&&(console.log("data is dataOverride",e),this.data=e),this._saF(),this._cF(this)}),"dataDidChange"),d._sdF=A((function(t,e){this._e=f({},e),this._i=f({},t),this.data=f({},this._i,this._e)}),"setData"),d._cF=A((function(t){t._rc=t._rcF(t.element||t._pe,t)}),"commitUpdate"),d.update=A((function(t){var e=this,r=t,o=!1,i=!1,c={};a(this.updateReducer)&&(r=this.updateReducer(this.data,t)),this.data=n(r).reduce((function(t,n){return t[n]!==r[n]&&(u(e._e[n])?(o=!0,e._i[n]=r[n],t[n]=r[n]):(i=!0,c[n]=r[n])),t}),this.data),i&&this._pc&&this._pc.update(c),o&&!i&&setTimeout((function(){e._cF(e)}),0)}),"update"),d.mount=A((function(t,e){var n=this._rF(t,e);return this.handle=this.handle||this.data.id||Symbol(n.tagName||"v"),n.element&&(n.element._rmF=n._rmF),b[this.handle]=n,n}),"mount"),d),x=function(t,e){this._sdF(e,t),this._v=!0},j=function(t,e,n){var r=new x(t);return r.tagName=e,r._v=!1,f(r,n)},P=function(t,e,n){return f(new x(t,e),n)};n(O).forEach((function(t){return x.prototype[t]=O[t]}));var E=function(t){t.tagName||t._c||h("tagName or Component must be defined");var e=Symbol("rt"),n=function(){var e,n=[].slice.call(arguments),r=n[0]||{},i=n.slice(1);s(n[0])?(i=n[0],r={}):o(n[0])?r={textContent:n[0]}:(n[0]||{})._rF&&(i.unshift(n[0]),r={}),o(i[0])&&(r.textContent=i[0],i=i.slice(1)),s(i[0])&&(i=i[0]);var a=f({},r,((e={}).children=i,e));return o(t.tagName)?j(a,t.tagName,t._o):t._c.prototype instanceof x?new t._c(a,t._i):P(a,t._i,f({},t._o,{content:t._c}))};return function(){var t=n.apply(void 0,[].slice.call(arguments));return t._rt=e,t}};window.eleMint={handles:b,config:_},e.Component=x,e.register=function(t,e){var n;return E(((n={}).tagName=t,n._o=e,n))},e.registerComponent=function(t,e,n){var r;return E(((r={})._c=t,r._i=e,r._o=n,r))},e.registerSVG=function(t){var e,n;return E(((n={}).tagName=t,n._o=((e={})._ns="http://www.w3.org/2000/svg",e),n))}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}var a,c,u;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},function(t,e,n){"use strict";n.d(e,"a",(function(){return W}));n(0);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o={$:function(t){return document.querySelector(t)},$$:function(t){return Array.from(document.querySelectorAll(t))}};var i=function(t){return function(e){return r(e)===t}};i("string"),i("boolean"),i("function"),i("object"),i("undefined");function a(t,e,n,r){return{x:t,y:e,w:n,h:r||n}}function c(t){var e=t;return{getPoint:function(){return u(e.x,e.y)},setPoint:function(t){e.x=t.x,e.y=t.y},shrink:function(t){return a(e.x+t,e.y+t,e.w-2*t,e.h-2*t)},expand:function(t){return a(e.x-t,e.y-t,e.w+2*t,e.h+2*t)},circle:function(t){return t||(t=Math.min(e.w,e.h)/2),n=e.x+e.w/2,r=e.y+e.h/2,{x:n,y:r,diameter:t};var n,r},inFrame:function(t){return t.x>=e.x&&t.y>=e.y&&t.y<=e.y+e.h&&t.x<=e.x+e.w}}}function u(t,e){return{x:t,y:e}}function s(t){return{toRect:function(e,n){return a(t.x,t.y,e,n)},translate:function(e){return u(e.x+t.x,e.y+t.y)}}}function l(t){var e=window.devicePixelRatio,n=window.innerHeight,r=window.innerWidth;t.width=r*e,t.height=n*e,t.style.width=r+"px",t.style.height=n+"px";var o=t.getContext("2d");o.scale(e,e);var i=a(0,0,t.width/e,t.height/e);function u(t){return{translateX:function(e){return t?Math.floor(e+t.x):Math.floor(e)},translateY:function(e){return t?Math.floor(e+t.y):Math.floor(e)}}}function s(t,e){t&&(o.fillStyle=t,o.fill()),e&&(o.strokeStyle=e.color,o.lineWidth=e.width,o.stroke())}function l(t,e,n,r){var i=u(r);o.beginPath(),o.rect(i.translateX(t.x),i.translateY(t.y),t.w,t.h),s(e,n),o.closePath()}return{drawRect:l,drawCircle:function(t,e,n,r){var i=u(r);o.beginPath(),o.arc(i.translateX(t.x),i.translateY(t.y),t.diameter,0,2*Math.PI,!1),s(e,n),o.closePath()},drawText:function(t,e,n,r){var i=u(r);o.font=n||"50px serif",o.fillStyle="#333",o.fillText(e,i.translateX(t.x),i.translateY(t.y)),o.closePath()},drawPath:function(t,e,n,r){var i=u(r);o.beginPath(),o.moveTo(i.translateX(t[0].x),i.translateY(t[0].y)),o.lineWidth=e||10,o.lineCap="round",o.strokeStyle=n||"#333",t.forEach((function(t){o.lineTo(i.translateX(t.x),i.translateY(t.y)),o.stroke()})),o.closePath()},fill:function(t){l(i,t)},clear:function(){o.clearRect(i.x,i.y,i.w,i.h)},context:o,canvas:t,inFrame:function(t){return c(i).inFrame(t)},dimensions:i}}var f=Math.floor(1e3/65),h=d(400);d(500);function d(t){return t/65}var p,m=[],y={ArrowUp:"up",ArrowDown:"down",ArrowLeft:"left",ArrowRight:"right"," ":"fire"};function v(t){m.push(t)}window.addEventListener("keydown",(function(t){m.forEach((function(e){e("keydown",t)}))})),window.addEventListener("keyup",(function(t){m.forEach((function(e){e("keyup",t)}))})),window.addEventListener("keypress",(function(t){m.forEach((function(e){e("keypress",t)}))})),function(t){t[t.keyboard=0]="keyboard",t[t.randomLinearLeftRight=1]="randomLinearLeftRight",t[t.scrollDown=2]="scrollDown"}(p||(p={}));function w(t,e,n){return function(r,o){var i=r.layout.frame,u=s(o).toRect(i.w,i.h),l=r.health;r.movementType===p.keyboard&&v((function(t,e){if("keypress"===t)return;var n=y[e.key];if(!n)return;"fire"===n?function(t){var e="keydown"===t;if(e===h)return;f=e,h=e,d=0}(t):function(t,e){var n=g[e];"keydown"===t&&(w[e]=n);"keyup"===t&&delete w[e]}(t,n)}));var f=!1,h=!1,d=0,m=0,w={},b=a(0,0,t.w-i.w,t.h-i.h);r.stayWithinFrame||(b=a(-100,-100,t.w+200,t.h+200));var g={up:function(){return o.y=Math.max(o.y-r.speed,0)},down:function(){return o.y=Math.min(o.y+r.speed,b.h)},left:function(){return o.x=Math.max(o.x-r.speed,0)},right:function(){return o.x=Math.min(o.x+r.speed,b.w)}};function _(){r.weapons.forEach((function(t){t.locations.forEach((function(e){n({weapon:t.weapon,location:s(e).translate(o),direction:r.pointingDirection,team:r.team})}))}))}return r.movementType===p.scrollDown&&(w.down=g.down),{render:function(){var t,n;if(r.movementType===p.scrollDown&&Math.random()>.995&&_(),h&&(f?(_(),f=!1):d++),d>65/8&&(f=!0,d=0),(t=w,n=Object.keys(t||{}),{keys:n,values:n.map((function(e){return t[e]})),iterator:function(){return n.map((function(e){return{key:e,value:t[e]}}))}}).values.forEach((function(t){return t()})),u=s(o).toRect(i.w,i.h),l<=0)return e(function(t,e){return[["c",{x:t.w/2,y:t.h/3,diameter:Math.min(t.h/2,Math.max(10,1.4*e))},"#E65",{width:4,color:"#F99"}],["c",{x:t.w/2-t.w/4,y:t.h/3+5,diameter:Math.min(t.h-t.h/4,Math.max(5,.4*e))},"#E65",{width:4,color:"#F99"}],["c",{x:t.w/2+t.w/4,y:t.h/3-5,diameter:Math.min(t.h-t.h/4,Math.max(2,.8*e))},"#E65",{width:4,color:"#F99"}]]}(i,m),o),void m++;e(r.layout.layoutData,o)},shouldRender:function(){return l>=0&&m<65&&c(t).inFrame(u)},team:r.team,hit:function(t,e){return!(e===r.team||l<=0)&&(!!c(u).inFrame(t)&&(l-=1,!0))}}}}var b,g={speed:900,power:50,layout:[["p",[[0,0],[0,10]],"#FA5",4],["p",[[0,2],[0,6]],"#F00",2]],hitLayout:function(t){return[["c",{x:0,y:5,diameter:Math.floor(t/1.2)},"#FA5",{width:1,color:"#F88"}]]}};!function(t){t.UP="UP",t.DOWN="DOWN",t.LEFT="LEFT",t.RIGHT="RIGHT"}(b||(b={}));var _=[["r",{x:0,y:20,w:80,h:21},"#666",{width:2,color:"#777"}],["p",[[8,8],[8,47]],"#777",7],["p",[[8,10],[8,45]],"#555",3],["p",[[72,8],[72,47]],"#777",8],["p",[[72,10],[72,45]],"#555",3],["p",[[32,40],[39,2],[40,2],[41,2],[48,40]],"#555",10],["p",[[40,10],[40,20]],"#AAA",5],["c",{x:40,y:42.5,diameter:10},"#777",{width:4,color:"#555"}],["c",{x:40,y:42.5,diameter:5},"#45E",{width:2,color:"#4555E9"}]];function A(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function O(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function x(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?A(Object(n),!0).forEach((function(e){O(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):A(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({team:"blue",layout:{frame:a(0,0,80,55),layoutData:_},speed:h,weapons:[{weapon:g,locations:[u(7,0),u(73,0)]}],shootingPattern:"manual",health:10,movementType:p.keyboard,pointingDirection:b.UP,stayWithinFrame:!0},t||{})}function j(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function P(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?j(Object(n),!0).forEach((function(e){E(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function E(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var C=[["r",{x:0,y:15,w:50,h:5},"#755",{width:4,color:"#866"}],["c",{x:25,y:17.5,diameter:50/3.5},"#944",{width:4,color:"#844"}],["p",[[50,0],[50,35]],"#755",5],["p",[[0,0],[0,35]],"#755",5]];function F(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function k(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function S(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?F(Object(n),!0).forEach((function(e){k(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):F(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({team:"red",layout:{frame:a(0,0,50,35),layoutData:C},speed:h/4,weapons:[{weapon:g,locations:[u(7,0),u(43,0)]}],health:4,shootingPattern:"ai",movementType:p.scrollDown,pointingDirection:b.DOWN,stayWithinFrame:!1},t||{})}var T=[["c",{x:22.5,y:0,diameter:45/3.5},"#944",{width:4,color:"#844"}],["p",[[5,0],[21.5,10],[22.5,20],[23.5,10],[40,0]],"#555",10]];function D(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function M(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function I(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?D(Object(n),!0).forEach((function(e){M(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({team:"red",layout:{frame:a(0,0,45,20),layoutData:T},speed:h/4,weapons:[{weapon:g,locations:[u(22.5,0)]}],health:1,shootingPattern:"ai",movementType:p.scrollDown,pointingDirection:b.DOWN,stayWithinFrame:!1},t||{})}function N(t,e){return{waves:new Array(20).join(",").split(",").map((function(n,r){return r%2==0?{pieces:[t(I(),u(e.w/2,0)),t(I(),u(e.w/2-60,0)),t(I(),u(e.w/2+60,0))],durationInSeconds:3}:{pieces:[t(S(),u(e.w/2,0)),t(S(),u(e.w/2-120,0)),t(S(),u(e.w/2+120,0))],durationInSeconds:6}}))}}function L(t,e){var n=0,r=[],o=function(t){var e={p:function(e,n){var r=e;t.drawPath(r[1].map((function(t){return{x:t[0],y:t[1]}})),r[3],r[2],n)},r:function(e,n){var r=e;t.drawRect(r[1],r[2],r[3]||null,n)},c:function(e,n){var r=e;t.drawCircle(r[1],r[2],r[3]||null,n)}};return function(t,n){t.forEach((function(t){var r=e[t[0]];r?r(t,n):console.error("failed to render layout, is layoutData correctly formed?")}))}}(t),i=w(t.dimensions,o,(function(t){r.push(t)})),a=function(t,e,n){return function(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return r.reduce((function(r,i){if(i.hit)return i.hit.framesShown++,i.hit.framesShown>Math.floor(65/6)||(r.push(i),e(i.weapon.hitLayout(i.hit.framesShown),i.hit.location)),r;var a={x:i.location.x,y:i.direction===b.DOWN?i.location.y+d(i.weapon.speed):i.location.y-d(i.weapon.speed)};if(!c(t).inFrame(a))return r;var u=P(P({},i),{},{location:a});return o.some((function(t){return t.hit(a,i.team)}))&&(u.hit={framesShown:0,location:a},n(i.team,1)),r.push(u),e(u.hit?i.weapon.hitLayout(1):i.weapon.layout,a),r}),[])}}(t.dimensions,o,(function(t,n){f.team===t&&(f.hits+=n,e.setScore(10*f.hits))})),s=u(t.dimensions.w/2-25,t.dimensions.h-100),l=i(x(),s),f={team:l.team,hits:0},h=N(i,t.dimensions),p={index:0,wave:h.waves[0]},m=h.waves[0].pieces;return{nextTick:function(){if((n+=1/65)>p.wave.durationInSeconds){if(p={index:p.index+1,wave:h.waves[p.index+1]},n=0,!p.wave)return void e.won();m=m.concat(p.wave.pieces)}l.shouldRender()||e.gameOver(),l.render(),(m=m.filter((function(t){return t.shouldRender()}))).forEach((function(t){return t.render()})),r=a(r,m.concat(l))}}}var R=o.$,W=function(){var t=o.$("#gameplay"),e=o.$("#background"),n=l(t),r=l(e);r.fill("#81bc5c"),r.drawRect(a(r.dimensions.w/2-100,0,200,r.dimensions.h),"#4d9bba"),function(t){var e={gameOver:function(){n="Game Over",r=null,setTimeout(o,1e4)},won:function(){n="You WIN!!!!",r=null,setTimeout(o,1e4)},setScore:function(t){R(".game-score").innerText="Score: ".concat(t)}},n=null,r=L(t,e),o=function(){r=L(t,e),n=null};v((function(t,e){"Escape"===e.key&&o()}));var i=0,a=Math.floor(Date.now()/1e3),c=0;setInterval((function(){return requestAnimationFrame((function(){var e=Math.floor(Date.now()/1e3);a===e?c++:(i=c,a=e,c=0),t.clear(),n&&t.drawText(u(t.dimensions.w/2-140,t.dimensions.h/2),n,"55px Arial Bold"),t.drawText(u(20,50),"FPS: ".concat(i),"20px Arial"),r&&r.nextTick()}))}),f)}(n)}},function(t,e,n){"use strict";n.r(e),function(t){var e=n(2);n(5);"DEVELOPMENT"!==t.env&&("serviceWorker"in navigator?navigator.serviceWorker.register("./sw.js").then((function(t){console.log("Service worker registration succeeded:",t)})).catch((function(t){console.log("Service worker registration failed:",t)})):console.log("Service workers are not supported.")),Object(e.a)()}.call(this,n(4))},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,s=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var t=c(h);l=!0;for(var e=s.length;e;){for(u=s,s=[];++f<e;)u&&u[f].run();f=-1,e=s.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];s.push(new p(t,e)),1!==s.length||l||c(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){var r=n(6),o=n(7);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function c(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function u(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],u=e.base?i[0]+e.base:i[0],s=n[u]||0,l="".concat(u," ").concat(s);n[u]=s+1;var f=c(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(h)):a.push({identifier:l,updater:y(h,e),references:1}),r.push(l)}return r}function s(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var l,f=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function h(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=f(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,m=0;function y(t,e){var n,r,o;if(e.singleton){var i=m++;n=p||(p=s(e)),r=h.bind(null,n,i,!1),o=h.bind(null,n,i,!0)}else n=s(e),r=d.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=u(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(t,e),s=0;s<n.length;s++){var l=c(n[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(t,e,n){"use strict";n.r(e);var r=n(1),o=n.n(r)()(!0);o.push([t.i,"* {\n    padding: 0;\n    margin: 0;\n  }\n  #main {\n    position: relative;\n    background-color: #d4e4f4;\n    width: 100%;\n    height: 100%;\n  }\n  canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    display: block;\n    margin: 0 auto;\n  }\n  .game-score {\n    position: absolute;\n    z-index: 10;\n    top: 10px;\n    right: 10px;\n    background-color: rgba(200,200,200, 0.8);\n    padding: 5px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n  }","",{version:3,sources:["webpack://styles.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;EACX;EACA;IACE,kBAAkB;IAClB,yBAAyB;IACzB,WAAW;IACX,YAAY;EACd;EACA;IACE,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,cAAc;IACd,cAAc;EAChB;EACA;IACE,kBAAkB;IAClB,WAAW;IACX,SAAS;IACT,WAAW;IACX,wCAAwC;IACxC,YAAY;IACZ,yCAAyC;IACzC,eAAe;EACjB",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n  }\n  #main {\n    position: relative;\n    background-color: #d4e4f4;\n    width: 100%;\n    height: 100%;\n  }\n  canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    display: block;\n    margin: 0 auto;\n  }\n  .game-score {\n    position: absolute;\n    z-index: 10;\n    top: 10px;\n    right: 10px;\n    background-color: rgba(200,200,200, 0.8);\n    padding: 5px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n  }"],sourceRoot:""}]),e.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
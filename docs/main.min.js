!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){var n=function(e){return Object.keys(e||{})},r=function(e){return function(t){return typeof t===e}},o=r("string"),i=r("boolean"),a=r("function"),c=r("object"),u=r("undefined"),s=function(e){return Array.isArray(e)},l=function(e){return null==e};function f(){return Object.assign.apply(null,Array.from(arguments))}function h(e){throw new Error(e)}var d,p=["element","handle","_pe","_pc","_rc","_se","_e","_i","_rt"],y=function e(t,r){if(l(t)&&l(r))return!0;if(l(t)||l(r))return!1;if(typeof t!=typeof r)return!1;if(a(t))return!0;if(s(t))return s(r)&&t.length===r.length&&t.reduce((function(t,n,o){return t&&e(n,r[o])}),!0);if(c(t)){var o=m(t,r);return n(t).reduce((function(e,t){return e&&o(t)}),!0)}return t===r},m=function(e,t){return function(n){return!!(p.includes(n)||l(e)&&l(t))||!l(e)&&!l(t)&&y(e[n],t[n])}},v={class:"className"},w="textContent|innerText|innerHTML|className|value|style|checked|selected|src|srcdoc|srcset|tabindex|target".split("|").reduce((function(e,t){return e[t]=1,e}),{}),b={},g=function(e){return function(){this._lF(["onWillRemove"]),this._rc.forEach((function(e){return e._rmF()})),e[this.handle]=null;var t=this._pe;this._se&&this._se.forEach((function(e){return e()})),this.element&&t&&t!==this.element&&t.removeChild(this.element),this.element=null,this._pc=null,this._pe=null}}(b),O={debug:!1},A=function(e,t){return function(){var n=[].slice.call(arguments);return O.debug&&console.log(t+" called with context: ",this,"args",n),e.apply(this,n)}},x=((d={})._aF=A((function(e){this._pe=e;var t=this.tagName?this.element:this._pe;return t||(t=document.createElementNS(this._ns||"http://www.w3.org/1999/xhtml",this.tagName),e.appendChild(t)),t}),"attach"),d._aelF=A((function(e,t){var n=this;if(!this._v){var r=function(e){t.apply(n,[e,o,n])},o=this.element;return o.addEventListener(e,r),function(){return o.removeEventListener(e,r)}}}),"addEventListener"),d._saF=A((function(){var e=this;this._v||((this._se||[]).forEach((function(e){return e()})),n(this.data).forEach((function(t){var n=e.data[t];if("on"===t.slice(0,"on".length))return e._se=e._se||[],void e._se.push(e._aelF(t.slice(2),n));!function(e,t,n,r){if("children"!==t){if("ref"===t||"_ns"===t)return n(e,r);var o=v[t]||t;w[o]||i(n)?e[o]=n:e.setAttribute(o,n)}}(e.element,t,n,e)})))}),"setAttribute"),d._rcF=A((function(e,t){var n=this;if(a(this.content)){var r=f({},this.data,{children:(this._e||{}).children});this.data.children=[this.content(r,(function(e){return n.update(e)}))]}var o=this._rc,i=this.data.children.filter((function(e){return null!=e})).map((function(n,r){n._rF||h("child must have render function");var i=function(e){return o?o[e]:null}(r);if(!i)return n.mount(e,t);var a=i._ccF(n),c=a.reusable;return a.identical&&i._v?(o[r]=void 0,i):c?(o[r]=void 0,i._lF(["onDataUpdated",i._e,n._e])&&i._dcF(n._e),i):n.mount(e,t)}));return o&&o.forEach((function(e){e&&e._rmF&&e._rmF()})),i}),"renderChildren"),d._rF=A((function(e,t){var n=this,r=this._aF(e);this._pc=t,this.element=this._v?null:r;var o=[this.element,this.data,function(e){return n.update(e)},this];return this._lF(["onAttach"].concat(o)),this._rc=this._rcF(r,this._v?this:t),this._saF(),this._lF(["onRender"].concat(o)),this}),"render"),d._rmF=A(g,"remove"),d._ccF=A((function(e){var t=m(this.data,e.data);return{identical:n(this.data).reduce((function(e,n){return e&&t(n)}),!0),reusable:this.tagName?m(this,e)("tagName"):y(this._rt,e._rt)}}),"compare"),d._lF=A((function(e){var t=this[e[0]];if(t){var n=t.apply(this,e.slice(1));if(!u(n))return n}return!0}),"commitLifecyleEvent"),d._dcF=A((function(e){this._sdF(this._i,e);var t=this._lF(["onDataChange",this.data,e]);c(t)&&(console.log("data is dataOverride",t),this.data=t),this._saF(),this._cF(this)}),"dataDidChange"),d._sdF=A((function(e,t){this._e=f({},t),this._i=f({},e),this.data=f({},this._i,this._e)}),"setData"),d._cF=A((function(e){e._rc=e._rcF(e.element||e._pe,e)}),"commitUpdate"),d.update=A((function(e){var t=this,r=e,o=!1,i=!1,c={};a(this.updateReducer)&&(r=this.updateReducer(this.data,e)),this.data=n(r).reduce((function(e,n){return e[n]!==r[n]&&(u(t._e[n])?(o=!0,t._i[n]=r[n],e[n]=r[n]):(i=!0,c[n]=r[n])),e}),this.data),i&&this._pc&&this._pc.update(c),o&&!i&&setTimeout((function(){t._cF(t)}),0)}),"update"),d.mount=A((function(e,t){var n=this._rF(e,t);return this.handle=this.handle||this.data.id||Symbol(n.tagName||"v"),n.element&&(n.element._rmF=n._rmF),b[this.handle]=n,n}),"mount"),d),_=function(e,t){this._sdF(t,e),this._v=!0},E=function(e,t,n){var r=new _(e);return r.tagName=t,r._v=!1,f(r,n)},j=function(e,t,n){return f(new _(e,t),n)};n(x).forEach((function(e){return _.prototype[e]=x[e]}));var P=function(e){e.tagName||e._c||h("tagName or Component must be defined");var t=Symbol("rt"),n=function(){var t,n=[].slice.call(arguments),r=n[0]||{},i=n.slice(1);s(n[0])?(i=n[0],r={}):o(n[0])?r={textContent:n[0]}:(n[0]||{})._rF&&(i.unshift(n[0]),r={}),o(i[0])&&(r.textContent=i[0],i=i.slice(1)),s(i[0])&&(i=i[0]);var a=f({},r,((t={}).children=i,t));return o(e.tagName)?E(a,e.tagName,e._o):e._c.prototype instanceof _?new e._c(a,e._i):j(a,e._i,f({},e._o,{content:e._c}))};return function(){var e=n.apply(void 0,[].slice.call(arguments));return e._rt=t,e}};window.eleMint={handles:b,config:O},t.Component=_,t.register=function(e,t){var n;return P(((n={}).tagName=e,n._o=t,n))},t.registerComponent=function(e,t,n){var r;return P(((r={})._c=e,r._i=t,r._o=n,r))},t.registerSVG=function(e){var t,n;return P(((n={}).tagName=e,n._o=((t={})._ns="http://www.w3.org/2000/svg",t),n))}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,c,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return he}));n(0);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o={$:function(e){return document.querySelector(e)},$$:function(e){return Array.from(document.querySelectorAll(e))}};var i=function(e){return function(t){return r(t)===e}},a=(i("string"),i("boolean"),i("function"));i("object"),i("undefined");function c(e,t,n,r){return{x:e,y:t,w:n,h:r||n}}function u(e){var t=e;return{getPoint:function(){return s(t.x,t.y)},setPoint:function(e){t.x=e.x,t.y=e.y},shrink:function(e){return c(t.x+e,t.y+e,t.w-2*e,t.h-2*e)},expand:function(e){return c(t.x-e,t.y-e,t.w+2*e,t.h+2*e)},circle:function(e){return e||(e=Math.min(t.w,t.h)/2),function(e,t,n){return{x:e,y:t,diameter:n}}(t.x+t.w/2,t.y+t.h/2,e)},inFrame:function(e){return e.x>=t.x&&e.y>=t.y&&e.y<=t.y+t.h&&e.x<=t.x+t.w},scale:function(e){return c(t.x,t.y,t.w*e,t.h*e)}}}function s(e,t){return{x:e,y:t}}function l(e){return{toRect:function(t,n){return c(e.x,e.y,t,n)},translate:function(t){return s(t.x+e.x,t.y+e.y)}}}function f(e,t,n){var r=t?t.h:window.innerHeight,o=t?t.w:window.innerWidth,i=window.devicePixelRatio;e.width=o*i,e.height=r*i,e.style.width=o+"px",e.style.height=r+"px";var a=e.getContext("2d");n&&(null==a||a.translate(e.width,e.height),null==a||a.rotate(Math.PI)),null==a||a.scale(i,i);var s=c(0,0,e.width/i,e.height/i);function l(e){return{translateX:function(t){return e?Math.floor(t+e.x):Math.floor(t)},translateY:function(t){return e?Math.floor(t+e.y):Math.floor(t)}}}function f(e,t){e&&(a.fillStyle=e,a.fill()),t&&(a.strokeStyle=t.color,a.lineWidth=t.width,a.stroke())}function h(e,t,n,r){var o=l(r);a.beginPath(),a.rect(o.translateX(e.x),o.translateY(e.y),e.w,e.h),f(t,n),a.closePath()}return{drawRect:h,drawCircle:function(e,t,n,r){var o=l(r);a.beginPath(),a.arc(o.translateX(e.x),o.translateY(e.y),e.diameter,0,2*Math.PI,!1),f(t,n),a.closePath()},drawText:function(e,t,n,r){var o=l(r);a.font=n||"50px serif",a.fillStyle="#333",a.fillText(t,o.translateX(e.x),o.translateY(e.y)),a.closePath()},drawPath:function(e,t,n,r){var o=l(r);a.beginPath(),a.moveTo(o.translateX(e[0].x),o.translateY(e[0].y)),a.lineWidth=t||10,a.lineCap="round",a.strokeStyle=n||"#333",e.forEach((function(e){a.lineTo(o.translateX(e.x),o.translateY(e.y))})),a.stroke(),a.closePath()},drawImage:function(e,t,n){var r=l(t),o=u(c(0,0,e.naturalWidth,e.naturalHeight)).scale(1/i);a.drawImage(e,r.translateX(0),r.translateY(0),o.w,o.h)},fill:function(e){h(s,e)},clear:function(){a.clearRect(s.x,s.y,s.w,s.h)},context:a,canvas:e,inFrame:function(e){return u(s).inFrame(e)},dimensions:s,toDataUrl:function(){return e.toDataURL("image/png")}}}var h=60,d=function(){return h},p=function(){return y(400)};function y(e){return e/d()}var m,v="#2E7D32",w="transparent";function b(e){var t={p:function(t,n,r){var o=t;e.drawPath(o[1].map((function(e){return{x:e[0],y:e[1]}})),o[3],r||o[2],n)},r:function(t,n,r){var o=t;e.drawRect(o[1],r||o[2],r?null:o[3]||null,n)},c:function(t,n,r){var o=t;e.drawCircle(o[1],r||o[2],r?null:o[3]||null,n)}};function n(e,n,r){e.forEach((function(e){var o=t[e[0]];o?o(e,n,r):console.error("failed to render layout, is layoutData correctly formed?")}))}return function(t,r,o){var i,a=null,c=null==o||null===(i=o.healthDisplay)||void 0===i?void 0:i.position;t.preRendered&&c&&(a=null==t?void 0:t.preRendered[c]);var u,l,f=function(){o&&o.healthDisplay&&function(e,t,r){var o=s(t.x,e.position===m.ABOVE?t.y-10:t.y+r.h+4),i=Math.floor(r.w*(e.current/e.initial));n([["r",{x:0,y:0,w:r.w,h:6},w,{width:1,color:v}],["r",{x:0,y:0,w:i,h:6},v]],o)}(o.healthDisplay,r,null==t?void 0:t.layout.frame)};if(a&&a instanceof HTMLImageElement)return u=a,l=r,e.drawImage(u,l),void f();o&&o.showShadow&&n(t.layout.layoutData,s(r.x,r.y+20),"rgba(80, 80, 80, 0.1)"),n(t.layout.layoutData,r),f()}}!function(e){e.ABOVE="ABOVE",e.BELOW="BELOW",e.LEFT="LEFT",e.RIGHT="RIGHT"}(m||(m={}));var g,O,A=[],x={ArrowUp:"up",ArrowDown:"down",ArrowLeft:"left",ArrowRight:"right"," ":"fire"};function _(e){return A.push(e),function(){var t=A.indexOf(e);A.splice(t,1)}}window.addEventListener("keydown",(function(e){A.forEach((function(t){t("keydown",e)}))})),window.addEventListener("keyup",(function(e){A.forEach((function(t){t("keyup",e)}))})),window.addEventListener("keypress",(function(e){A.forEach((function(t){t("keypress",e)}))})),function(e){e.UP="UP",e.DOWN="DOWN",e.LEFT="LEFT",e.RIGHT="RIGHT"}(g||(g={})),function(e){e[e.keyboard=0]="keyboard",e[e.randomLinearLeftRight=1]="randomLinearLeftRight",e[e.scrollDown=2]="scrollDown"}(O||(O={}));var E=function(e,t,n){var r=t>n/2?n-t:t,o=Math.floor(Math.min(t/n*10,9));return[["c",{x:e.w/2,y:e.h/3,diameter:Math.min(e.h/2,Math.max(10,2.8*r))},"#E".concat(o).concat(Math.max(o-1,1)),{width:4,color:"#F".concat(o).concat(o)}],["c",{x:e.w/2-e.w/4,y:e.h/3+5,diameter:Math.min(e.h-e.h/4,Math.max(5,.8*r))},"#E65",{width:4,color:"#F99"}],["c",{x:e.w/2+e.w/4,y:e.h/3-5,diameter:Math.min(e.h-e.h/4,Math.max(2,1.6*r))},"#E65",{width:4,color:"#F99"}]]};function j(e,t,n){return function(r,o){var i=r.layout.frame,s=l(o).toRect(i.w,i.h),f=r.health,h=null;r.movementType===O.keyboard&&(h=_((function(e,t){if("keypress"===e)return;var n=x[t.key];if(!n)return;"fire"===n?function(e){var t="keydown"===e;if(t===y)return;p=t,y=t,v=0}(e):function(e,t){var n=D[t];"keydown"===e&&(A[t]=n);"keyup"===e&&delete A[t]}(e,n)})));var p=!1,y=!1,v=0,w=d()/2,b=0,A={},j=c(0,0,e.w-i.w,e.h-i.h),P=c(-(i.w+1),-(i.h+1),e.w+2*i.w,e.h+2*i.h);r.stayWithinFrame||(j=c(-2*i.w,-2*i.h,e.w+4*i.w,e.h+4*i.h));var D={up:function(){return o.y=Math.max(o.y-r.speed(),0)},down:function(){return o.y=Math.min(o.y+r.speed(),j.h)},left:function(){return o.x=Math.max(o.x-r.speed(),0)},right:function(){return o.x=Math.min(o.x+r.speed(),j.w)}};function C(){r.movementType===O.scrollDown&&(Math.random()>.995&&f>0&&k());y&&(p?(k(),p=!1):v++),v>d()/8&&(p=!0,v=0)}function k(){r.weapons.forEach((function(e){e.locations.forEach((function(t){n({weapon:e.weapon,location:l(t).translate(o),direction:r.pointingDirection,team:r.team})}))}))}return r.movementType===O.scrollDown&&(A.down=D.down),{render:function(){var e,n;if(C(),(e=A,n=Object.keys(e||{}),{keys:n,values:n.map((function(t){return e[t]})),iterator:function(){return n.map((function(t){return{key:t,value:e[t]}}))}}).values.forEach((function(e){return e()})),s=l(o).toRect(i.w,i.h),f<=0)return t({layout:{layoutData:E(i,b,w)}},o),void b++;t(r,o,{showShadow:!0,healthDisplay:{position:r.pointingDirection===g.DOWN?m.ABOVE:m.BELOW,current:f,initial:r.health}})},shouldRender:function(){return f>=0&&b<w&&u(P).inFrame(s)},team:r.team,hit:function(e,t){return!(t===r.team||f<=0)&&(!!u(s).inFrame(e)&&(f-=1,!0))},dispose:function(){a(h)&&h()}}}}function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function D(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var k,S=document.getElementById("scratch-pad"),F=function(e,t){console.log("rendering");var n=D(D({},e.frame),{},{h:e.frame.h+20}),r=f(S,n,t===g.DOWN||void 0);b(r)({layout:e},s(0,0),{showShadow:!0});var o=r.toDataUrl();r.clear();var i=new Image;return i.src=o,i};function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var M,W={layoutData:[["p",[[0,0],[0,10]],"#5AF",6],["p",[[0,2],[0,6]],"#00F",3]],frame:c(0,0,20,30)},N={speed:900,power:50,layout:W,preRendered:(k={},T(k,g.DOWN,F(W,g.DOWN)),T(k,g.UP,F(W,g.UP)),k),hitLayout:function(e){return[["c",{x:0,y:5,diameter:Math.floor(e/1.2)},"#FA5",{width:1,color:"#F88"}]]}},R=[["r",{x:0,y:20,w:80,h:21},"#666",{width:2,color:"#777"}],["p",[[8,8],[8,47]],"#777",7],["p",[[8,10],[8,45]],"#555",3],["p",[[72,8],[72,47]],"#777",8],["p",[[72,10],[72,45]],"#555",3],["p",[[32,40],[39,2],[40,2],[41,2],[48,40]],"#555",10],["p",[[40,10],[40,20]],"#AAA",5],["c",{x:40,y:42.5,diameter:10},"#777",{width:4,color:"#555"}],["c",{x:40,y:42.5,diameter:5},"#45E",{width:2,color:"#4555E9"}]];function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var U={layoutData:[["r",{x:14/3,y:3,w:14/3,h:24},"#446"],["p",[[4,7],[7,0],[10,7]],"#446",3],["p",[[6,4],[6,16]],"#666",1],["p",[[2,20],[2,30]],"#446",2],["p",[[11,20],[11,30]],"#446",2],["p",[[3,18],[3,25]],"#555",2],["p",[[9,18],[9,25]],"#555",2]],frame:c(0,0,20,30)},B={speed:450,power:50,layout:U,preRendered:(M={},L(M,g.DOWN,F(U,g.DOWN)),L(M,g.UP,F(U,g.UP)),M),hitLayout:function(e){return[["c",{x:0,y:5,diameter:Math.floor(2*e)},"#FA5",{width:1,color:"#F88"}]]}};function I(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var H={frame:c(0,0,80,55),layoutData:R};function X(e){var t;return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?I(Object(n),!0).forEach((function(t){Y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):I(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({team:"blue",layout:H,preRendered:(t={},Y(t,g.DOWN,F(H,g.DOWN)),Y(t,g.UP,F(H,g.UP)),t),speed:p,weapons:[{weapon:N,locations:[s(7,0),s(73,0)]},{weapon:B,locations:[s(40,0)]}],shootingPattern:"manual",health:15,movementType:O.keyboard,pointingDirection:g.UP,stayWithinFrame:!0},e||{})}function z(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function V(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?z(Object(n),!0).forEach((function(t){G(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):z(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function G(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $=[["r",{x:0,y:15,w:100,h:40},"#755",{width:4,color:"#866"}],["c",{x:50,y:35,diameter:100/3.5},"#944",{width:4,color:"#844"}],["p",[[100,0],[100,70]],"#755",7],["p",[[0,0],[0,70]],"#755",7]];function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var J={frame:c(0,0,100,70),layoutData:$};function K(e){var t;return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){Z(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({team:"red",layout:J,preRendered:(t={},Z(t,g.DOWN,F(J,g.DOWN)),Z(t,g.UP,F(J,g.UP)),t),speed:function(){return p()/9},weapons:[{weapon:N,locations:[s(7,3),s(93,0),s(50,0)]},{weapon:B,locations:[s(40,0)]},{weapon:B,locations:[s(60,0)]}],health:120,shootingPattern:"ai",movementType:O.scrollDown,pointingDirection:g.DOWN,stayWithinFrame:!1},e||{})}var Q=[["r",{x:0,y:15,w:50,h:5},"#755",{width:4,color:"#866"}],["c",{x:25,y:17.5,diameter:50/3.5},"#944",{width:4,color:"#844"}],["p",[[50,0],[50,35]],"#755",7],["p",[[0,0],[0,35]],"#755",7]];function ee(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ne={frame:c(0,0,50,35),layoutData:Q};function re(e){var t;return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ee(Object(n),!0).forEach((function(t){te(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ee(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({team:"red",layout:ne,preRendered:(t={},te(t,g.DOWN,F(ne,g.DOWN)),te(t,g.UP,F(ne,g.UP)),t),speed:function(){return p()/5},weapons:[{weapon:N,locations:[s(7,0),s(43,0)]}],health:4,shootingPattern:"ai",movementType:O.scrollDown,pointingDirection:g.DOWN,stayWithinFrame:!1},e||{})}var oe=[["c",{x:17.5,y:17.5,diameter:35/3},"#944",{width:4,color:"#844"}],["p",[[5,15],[16.5,28],[17.5,38],[18.5,28],[30,15]],"#555",10]];function ie(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ae(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ce={frame:c(0,0,35,35),layoutData:oe};function ue(e){var t;return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ie(Object(n),!0).forEach((function(t){ae(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ie(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({team:"red",layout:ce,preRendered:(t={},ae(t,g.DOWN,F(ce,g.DOWN)),ae(t,g.UP,F(ce,g.UP)),t),speed:function(){return p()/3},weapons:[{weapon:N,locations:[s(17.5,20)]}],health:1,shootingPattern:"ai",movementType:O.scrollDown,pointingDirection:g.DOWN,stayWithinFrame:!1},e||{})}function se(e,t){var n,r=ue({health:2}),o=r.layout.frame.h,i=re(),a=i.layout.frame.h;return{waves:(n=7,new Array(Math.floor(n)).join(",").split(",")).map((function(n,c){return 6===(u=c)?{pieces:[e(K(),s(t.w/2,-70))],durationInSeconds:15}:u%2==0?{pieces:(f=t.w/5,[e(r,s(f,-o)),e(r,s(2*f,-o)),e(r,s(3*f,-o)),e(r,s(4*f,-o))]),durationInSeconds:3}:{pieces:(l=t.w/4,[e(i,s(l,-a)),e(i,s(2*l,-a)),e(i,s(3*l,-a))]),durationInSeconds:6};var u,l,f}))}}function le(e,t,n){var r=0,o=[],i=b(e),a=(b(t),j(e.dimensions,i,(function(e){o.push(e)}))),c=function(e,t,n){return function(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return r.reduce((function(r,i){if(i.hit)return i.hit.framesShown++,i.hit.framesShown>Math.floor(d()/6)||(r.push(i),t({layout:{layoutData:i.weapon.hitLayout(i.hit.framesShown)}},i.hit.location)),r;var a={x:i.location.x,y:i.direction===g.DOWN?i.location.y+y(i.weapon.speed):i.location.y-y(i.weapon.speed)};if(!u(e).inFrame(a))return r;var c=V(V({},i),{},{location:a});return o.some((function(e){return e.hit(a,i.team)}))&&(c.hit={framesShown:0,location:a},n(i.team,1)),r.push(c),c.hit?t({layout:{layoutData:c.hit?i.weapon.hitLayout(1):i.weapon.layout.layoutData}},a):t({preRendered:i.weapon.preRendered[i.direction],layout:{layoutData:i.weapon.layout.layoutData}},a),r}),[])}}(e.dimensions,i,(function(e,t){h.team===e&&(h.hits+=t,n.setScore(5*h.hits))})),l=s(e.dimensions.w/2-25,e.dimensions.h-100),f=a(X(),l),h={team:f.team,hits:0},p=[se(a,e.dimensions),se(a,e.dimensions),se(a,e.dimensions)],m=function(e,t){var n=e.dimensions,r=0,o=n.w/4;return{nextTick:function(){r++,e.clear(),e.fill("#81bc5c"),e.drawPath([s(n.w/2,0),s(n.w/2,n.h)],o,"#4d9bba"),r>n.h&&(r=0),e.fill("rgba(200,200,200, 0.5")}}}(t),v=-1,w=null,O=null,A=[];function x(){m.nextTick(),v++,(w=p[v])?(n.setMessage("Level ".concat(v+1),2),O={index:0,wave:w.waves[0]},A=A.concat(O.wave.pieces)):n.won()}return x(),{nextTick:function(){if((r+=1/d())>O.wave.durationInSeconds){if(O={index:O.index+1,wave:w.waves[O.index+1]},r=0,!O.wave)return void x();A=A.concat(O.wave.pieces)}f.shouldRender()||n.gameOver(),e.clear(),f.render(),(A=A.filter((function(e){return e.shouldRender()}))).forEach((function(e){return e.render()})),o=c(o,A.concat(f))},dispose:function(){f.dispose(),A=[]}}}var fe=o.$,he=function(){var e=o.$("#gameplay"),t=o.$("#background");!function(e,t){var n={gameOver:function(){r="Game Over",u(),setTimeout(c,8e3)},won:function(){r="You WIN!!!!",u(),setTimeout(c,1e4)},setScore:function(e){fe(".game-score").innerText="Score: ".concat(e)},setMessage:function(e,t){r=e,o=t*d(),console.log("pause duration: ",o)}},r=null,o=0,i=!1,a=le(e,t,n),c=function(){a=le(e,t,n),r=null},u=function(){a&&(a.dispose(),a=null)};_((function(e,t){"Escape"===t.key&&c(),"p"===t.key&&(i=!i)}));var l=Date.now(),f=Date.now(),p=[],y=function(e){var t=e-f;f=e;var n=Math.floor(1e3/t);h=n,Date.now()-3e3>l&&(l=Date.now(),fe(".game-fps").innerText="fps: ".concat(n))};requestAnimationFrame((function t(n){if(y(n),(r||i)&&(e.clear(),e.drawText(s(e.dimensions.w/2-140,e.dimensions.h/2),r||"PAUSED, press 'p' to unpause","55px Arial Bold")),requestAnimationFrame(t),o>0)0===--o&&(r=null);else if(a&&!i){var c=performance.now();a.nextTick();var u=performance.now();p.push(u-c),p.length>1e3&&(console.log("aveTickDuration",p.reduce((function(e,t,n,r){return e+t/r.length}),0)),p=[])}}))}(f(e),f(t))}},function(e,t,n){"use strict";n.r(t),function(e){var t=n(2);n(5);"DEVELOPMENT"!==e.env&&("serviceWorker"in navigator?navigator.serviceWorker.register("./sw.js").then((function(e){console.log("Service worker registration succeeded:",e)})).catch((function(e){console.log("Service worker registration failed:",e)})):console.log("Service workers are not supported.")),Object(t.a)()}.call(this,n(4))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var e=c(h);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new p(e,t)),1!==s.length||l||c(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){var r=n(6),o=n(7);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],s=n[u]||0,l="".concat(u," ").concat(s);n[u]=s+1;var f=c(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(h)):a.push({identifier:l,updater:m(h,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function h(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,y=0;function m(e,t){var n,r,o;if(t.singleton){var i=y++;n=p||(p=s(t)),r=h.bind(null,n,i,!1),o=h.bind(null,n,i,!0)}else n=s(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(e,t),s=0;s<n.length;s++){var l=c(n[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r)()(!0);o.push([e.i,"* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n","",{version:3,sources:["webpack://styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;AACX;AACA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,OAAO;EACP,MAAM;EACN,cAAc;EACd,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,WAAW;EACX,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,UAAU;EACV,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n"],sourceRoot:""}]),t.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
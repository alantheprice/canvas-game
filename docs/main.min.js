!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=3)}([function(t,n){var e=function(t){return Object.keys(t||{})},r=function(t){return function(n){return typeof n===t}},o=r("string"),i=r("boolean"),a=r("function"),c=r("object"),u=r("undefined"),s=function(t){return Array.isArray(t)},l=function(t){return null==t};function f(){return Object.assign.apply(null,Array.from(arguments))}function h(t){throw new Error(t)}var d,p=["element","handle","_pe","_pc","_rc","_se","_e","_i","_rt"],m=function t(n,r){if(l(n)&&l(r))return!0;if(l(n)||l(r))return!1;if(typeof n!=typeof r)return!1;if(a(n))return!0;if(s(n))return s(r)&&n.length===r.length&&n.reduce((function(n,e,o){return n&&t(e,r[o])}),!0);if(c(n)){var o=y(n,r);return e(n).reduce((function(t,n){return t&&o(n)}),!0)}return n===r},y=function(t,n){return function(e){return!!(p.includes(e)||l(t)&&l(n))||!l(t)&&!l(n)&&m(t[e],n[e])}},v={class:"className"},w="textContent|innerText|innerHTML|className|value|style|checked|selected|src|srcdoc|srcset|tabindex|target".split("|").reduce((function(t,n){return t[n]=1,t}),{}),g={},b=function(t){return function(){this._lF(["onWillRemove"]),this._rc.forEach((function(t){return t._rmF()})),t[this.handle]=null;var n=this._pe;this._se&&this._se.forEach((function(t){return t()})),this.element&&n&&n!==this.element&&n.removeChild(this.element),this.element=null,this._pc=null,this._pe=null}}(g),A={debug:!1},O=function(t,n){return function(){var e=[].slice.call(arguments);return A.debug&&console.log(n+" called with context: ",this,"args",e),t.apply(this,e)}},_=((d={})._aF=O((function(t){this._pe=t;var n=this.tagName?this.element:this._pe;return n||(n=document.createElementNS(this._ns||"http://www.w3.org/1999/xhtml",this.tagName),t.appendChild(n)),n}),"attach"),d._aelF=O((function(t,n){var e=this;if(!this._v){var r=function(t){n.apply(e,[t,o,e])},o=this.element;return o.addEventListener(t,r),function(){return o.removeEventListener(t,r)}}}),"addEventListener"),d._saF=O((function(){var t=this;this._v||((this._se||[]).forEach((function(t){return t()})),e(this.data).forEach((function(n){var e=t.data[n];if("on"===n.slice(0,"on".length))return t._se=t._se||[],void t._se.push(t._aelF(n.slice(2),e));!function(t,n,e,r){if("children"!==n){if("ref"===n||"_ns"===n)return e(t,r);var o=v[n]||n;w[o]||i(e)?t[o]=e:t.setAttribute(o,e)}}(t.element,n,e,t)})))}),"setAttribute"),d._rcF=O((function(t,n){var e=this;if(a(this.content)){var r=f({},this.data,{children:(this._e||{}).children});this.data.children=[this.content(r,(function(t){return e.update(t)}))]}var o=this._rc,i=this.data.children.filter((function(t){return null!=t})).map((function(e,r){e._rF||h("child must have render function");var i=function(t){return o?o[t]:null}(r);if(!i)return e.mount(t,n);var a=i._ccF(e),c=a.reusable;return a.identical&&i._v?(o[r]=void 0,i):c?(o[r]=void 0,i._lF(["onDataUpdated",i._e,e._e])&&i._dcF(e._e),i):e.mount(t,n)}));return o&&o.forEach((function(t){t&&t._rmF&&t._rmF()})),i}),"renderChildren"),d._rF=O((function(t,n){var e=this,r=this._aF(t);this._pc=n,this.element=this._v?null:r;var o=[this.element,this.data,function(t){return e.update(t)},this];return this._lF(["onAttach"].concat(o)),this._rc=this._rcF(r,this._v?this:n),this._saF(),this._lF(["onRender"].concat(o)),this}),"render"),d._rmF=O(b,"remove"),d._ccF=O((function(t){var n=y(this.data,t.data);return{identical:e(this.data).reduce((function(t,e){return t&&n(e)}),!0),reusable:this.tagName?y(this,t)("tagName"):m(this._rt,t._rt)}}),"compare"),d._lF=O((function(t){var n=this[t[0]];if(n){var e=n.apply(this,t.slice(1));if(!u(e))return e}return!0}),"commitLifecyleEvent"),d._dcF=O((function(t){this._sdF(this._i,t);var n=this._lF(["onDataChange",this.data,t]);c(n)&&(console.log("data is dataOverride",n),this.data=n),this._saF(),this._cF(this)}),"dataDidChange"),d._sdF=O((function(t,n){this._e=f({},n),this._i=f({},t),this.data=f({},this._i,this._e)}),"setData"),d._cF=O((function(t){t._rc=t._rcF(t.element||t._pe,t)}),"commitUpdate"),d.update=O((function(t){var n=this,r=t,o=!1,i=!1,c={};a(this.updateReducer)&&(r=this.updateReducer(this.data,t)),this.data=e(r).reduce((function(t,e){return t[e]!==r[e]&&(u(n._e[e])?(o=!0,n._i[e]=r[e],t[e]=r[e]):(i=!0,c[e]=r[e])),t}),this.data),i&&this._pc&&this._pc.update(c),o&&!i&&setTimeout((function(){n._cF(n)}),0)}),"update"),d.mount=O((function(t,n){var e=this._rF(t,n);return this.handle=this.handle||this.data.id||Symbol(e.tagName||"v"),e.element&&(e.element._rmF=e._rmF),g[this.handle]=e,e}),"mount"),d),x=function(t,n){this._sdF(n,t),this._v=!0},E=function(t,n,e){var r=new x(t);return r.tagName=n,r._v=!1,f(r,e)},C=function(t,n,e){return f(new x(t,n),e)};e(_).forEach((function(t){return x.prototype[t]=_[t]}));var j=function(t){t.tagName||t._c||h("tagName or Component must be defined");var n=Symbol("rt"),e=function(){var n,e=[].slice.call(arguments),r=e[0]||{},i=e.slice(1);s(e[0])?(i=e[0],r={}):o(e[0])?r={textContent:e[0]}:(e[0]||{})._rF&&(i.unshift(e[0]),r={}),o(i[0])&&(r.textContent=i[0],i=i.slice(1)),s(i[0])&&(i=i[0]);var a=f({},r,((n={}).children=i,n));return o(t.tagName)?E(a,t.tagName,t._o):t._c.prototype instanceof x?new t._c(a,t._i):C(a,t._i,f({},t._o,{content:t._c}))};return function(){var t=e.apply(void 0,[].slice.call(arguments));return t._rt=n,t}};window.eleMint={handles:g,config:A},n.Component=x,n.register=function(t,n){var e;return j(((e={}).tagName=t,e._o=n,e))},n.registerComponent=function(t,n,e){var r;return j(((r={})._c=t,r._i=n,r._o=e,r))},n.registerSVG=function(t){var n,e;return j(((e={}).tagName=t,e._o=((n={})._ns="http://www.w3.org/2000/svg",n),e))}},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([o]).join("\n")}var a,c,u;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&o[u[0]]||(e&&(u[2]?u[2]="".concat(e," and ").concat(u[2]):u[2]=e),n.push(u))}},n}},function(t,n,e){"use strict";e.d(n,"a",(function(){return V}));e(0);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o={$:function(t){return document.querySelector(t)},$$:function(t){return Array.from(document.querySelectorAll(t))}};var i=function(t){return function(n){return r(n)===t}},a=(i("string"),i("boolean"),i("function"));i("object"),i("undefined");function c(t){return new Array(t).join(",").split(",")}function u(t,n,e,r){return{x:t,y:n,w:e,h:r||e}}function s(t){var n=t;return{getPoint:function(){return l(n.x,n.y)},setPoint:function(t){n.x=t.x,n.y=t.y},shrink:function(t){return u(n.x+t,n.y+t,n.w-2*t,n.h-2*t)},expand:function(t){return u(n.x-t,n.y-t,n.w+2*t,n.h+2*t)},circle:function(t){return t||(t=Math.min(n.w,n.h)/2),e=n.x+n.w/2,r=n.y+n.h/2,{x:e,y:r,diameter:t};var e,r},inFrame:function(t){return t.x>=n.x&&t.y>=n.y&&t.y<=n.y+n.h&&t.x<=n.x+n.w}}}function l(t,n){return{x:t,y:n}}function f(t){return{toRect:function(n,e){return u(t.x,t.y,n,e)},translate:function(n){return l(n.x+t.x,n.y+t.y)}}}function h(t){var n=window.devicePixelRatio,e=window.innerHeight,r=window.innerWidth;t.width=r*n,t.height=e*n,t.style.width=r+"px",t.style.height=e+"px";var o=t.getContext("2d");o.scale(n,n);var i=u(0,0,t.width/n,t.height/n);function a(t){return{translateX:function(n){return t?Math.floor(n+t.x):Math.floor(n)},translateY:function(n){return t?Math.floor(n+t.y):Math.floor(n)}}}function c(t,n){t&&(o.fillStyle=t,o.fill()),n&&(o.strokeStyle=n.color,o.lineWidth=n.width,o.stroke())}function l(t,n,e,r){var i=a(r);o.beginPath(),o.rect(i.translateX(t.x),i.translateY(t.y),t.w,t.h),c(n,e),o.closePath()}return{drawRect:l,drawCircle:function(t,n,e,r){var i=a(r);o.beginPath(),o.arc(i.translateX(t.x),i.translateY(t.y),t.diameter,0,2*Math.PI,!1),c(n,e),o.closePath()},drawText:function(t,n,e,r){var i=a(r);o.font=e||"50px serif",o.fillStyle="#333",o.fillText(n,i.translateX(t.x),i.translateY(t.y)),o.closePath()},drawPath:function(t,n,e,r){var i=a(r);o.beginPath(),o.moveTo(i.translateX(t[0].x),i.translateY(t[0].y)),o.lineWidth=n||10,o.lineCap="round",o.strokeStyle=e||"#333",t.forEach((function(t){o.lineTo(i.translateX(t.x),i.translateY(t.y))})),o.stroke(),o.closePath()},fill:function(t){l(i,t)},clear:function(){o.clearRect(i.x,i.y,i.w,i.h)},context:o,canvas:t,inFrame:function(t){return s(i).inFrame(t)},dimensions:i}}var d,p=60,m=function(){return p},y=function(){return v(400)};function v(t){return t/m()}function w(t){var n={p:function(n,e,r){var o=n;t.drawPath(o[1].map((function(t){return{x:t[0],y:t[1]}})),o[3],r||o[2],e)},r:function(n,e,r){var o=n;t.drawRect(o[1],r||o[2],r?null:o[3]||null,e)},c:function(n,e,r){var o=n;t.drawCircle(o[1],r||o[2],r?null:o[3]||null,e)}};function e(t,e,r){t.forEach((function(t){var o=n[t[0]];o?o(t,e,r):console.error("failed to render layout, is layoutData correctly formed?")}))}return function(t,n,r){r&&r.showShadow&&e(t.layoutData,l(n.x,n.y+20),"rgba(80, 80, 80, 0.1)"),e(t.layoutData,n),r&&r.healthDisplay&&t.frame&&function(t,n,r){var o=l(n.x,t.position===d.ABOVE?n.y-19:n.y+r.h+4);e(c(t.initial/2).map((function(n,e){var r=t.current-2*(e+1);return["c",{x:15*e,y:0,diameter:5},r>1?"#2E7D32":"transparent",{width:3,color:r>=0?"#2E7D32":"#c62828"}]})),o)}(r.healthDisplay,n,t.frame)}}!function(t){t.ABOVE="ABOVE",t.BELOW="BELOW",t.LEFT="LEFT",t.RIGHT="RIGHT"}(d||(d={}));var g,b=[],A={ArrowUp:"up",ArrowDown:"down",ArrowLeft:"left",ArrowRight:"right"," ":"fire"};function O(t){return b.push(t),function(){var n=b.indexOf(t);b.splice(n,1)}}window.addEventListener("keydown",(function(t){b.forEach((function(n){n("keydown",t)}))})),window.addEventListener("keyup",(function(t){b.forEach((function(n){n("keyup",t)}))})),window.addEventListener("keypress",(function(t){b.forEach((function(n){n("keypress",t)}))})),function(t){t[t.keyboard=0]="keyboard",t[t.randomLinearLeftRight=1]="randomLinearLeftRight",t[t.scrollDown=2]="scrollDown"}(g||(g={}));var _,x=function(t,n,e){var r=n>e/2?e-n:n,o=Math.floor(Math.min(n/e*10,9));return[["c",{x:t.w/2,y:t.h/3,diameter:Math.min(t.h/2,Math.max(10,2.8*r))},"#E".concat(o).concat(Math.max(o-1,1)),{width:4,color:"#F".concat(o).concat(o)}],["c",{x:t.w/2-t.w/4,y:t.h/3+5,diameter:Math.min(t.h-t.h/4,Math.max(5,.8*r))},"#E65",{width:4,color:"#F99"}],["c",{x:t.w/2+t.w/4,y:t.h/3-5,diameter:Math.min(t.h-t.h/4,Math.max(2,1.6*r))},"#E65",{width:4,color:"#F99"}]]};function E(t,n,e){return function(r,o){var i=r.layout.frame,c=f(o).toRect(i.w,i.h),l=r.health,h=null;r.movementType===g.keyboard&&(h=O((function(t,n){if("keypress"===t)return;var e=A[n.key];if(!e)return;"fire"===e?function(t){var n="keydown"===t;if(n===y)return;p=n,y=n,v=0}(t):function(t,n){var e=P[n];"keydown"===t&&(E[n]=e);"keyup"===t&&delete E[n]}(t,e)})));var p=!1,y=!1,v=0,w=m()/2,b=0,E={},C=u(0,0,t.w-i.w,t.h-i.h),j=u(-(i.w+1),-(i.h+1),t.w+2*i.w,t.h+2*i.h);r.stayWithinFrame||(C=u(-2*i.w,-2*i.h,t.w+4*i.w,t.h+4*i.h));var P={up:function(){return o.y=Math.max(o.y-r.speed(),0)},down:function(){return o.y=Math.min(o.y+r.speed(),C.h)},left:function(){return o.x=Math.max(o.x-r.speed(),0)},right:function(){return o.x=Math.min(o.x+r.speed(),C.w)}};function F(){r.movementType===g.scrollDown&&(Math.random()>.995&&l>0&&S());y&&(p?(S(),p=!1):v++),v>m()/8&&(p=!0,v=0)}function S(){r.weapons.forEach((function(t){t.locations.forEach((function(n){e({weapon:t.weapon,location:f(n).translate(o),direction:r.pointingDirection,team:r.team})}))}))}return r.movementType===g.scrollDown&&(E.down=P.down),{render:function(){var t,e;if(F(),(t=E,e=Object.keys(t||{}),{keys:e,values:e.map((function(n){return t[n]})),iterator:function(){return e.map((function(n){return{key:n,value:t[n]}}))}}).values.forEach((function(t){return t()})),c=f(o).toRect(i.w,i.h),l<=0)return n({layoutData:x(i,b,w)},o),void b++;n(r.layout,o,{showShadow:!0,healthDisplay:{position:r.pointingDirection===_.DOWN?d.ABOVE:d.BELOW,current:l,initial:r.health}})},shouldRender:function(){return l>=0&&b<w&&s(j).inFrame(c)},team:r.team,hit:function(t,n){return!(n===r.team||l<=0)&&(!!s(c).inFrame(t)&&(l-=1,!0))},dispose:function(){a(h)&&h()}}}}!function(t){t.UP="UP",t.DOWN="DOWN",t.LEFT="LEFT",t.RIGHT="RIGHT"}(_||(_={}));var C={speed:900,power:50,layout:[["p",[[0,0],[0,10]],"#5AF",4],["p",[[0,2],[0,6]],"#00F",2]],hitLayout:function(t){return[["c",{x:0,y:5,diameter:Math.floor(t/1.2)},"#FA5",{width:1,color:"#F88"}]]}},j=[["r",{x:0,y:20,w:80,h:21},"#666",{width:2,color:"#777"}],["p",[[8,8],[8,47]],"#777",7],["p",[[8,10],[8,45]],"#555",3],["p",[[72,8],[72,47]],"#777",8],["p",[[72,10],[72,45]],"#555",3],["p",[[32,40],[39,2],[40,2],[41,2],[48,40]],"#555",10],["p",[[40,10],[40,20]],"#AAA",5],["c",{x:40,y:42.5,diameter:10},"#777",{width:4,color:"#555"}],["c",{x:40,y:42.5,diameter:5},"#45E",{width:2,color:"#4555E9"}]];function P(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function F(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function S(t){return function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?P(Object(e),!0).forEach((function(n){F(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):P(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({team:"blue",layout:{frame:u(0,0,80,55),layoutData:j},speed:y,weapons:[{weapon:C,locations:[l(7,0),l(73,0)]}],shootingPattern:"manual",health:10,movementType:g.keyboard,pointingDirection:_.UP,stayWithinFrame:!0},t||{})}function k(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function T(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?k(Object(e),!0).forEach((function(n){D(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):k(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function D(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var M=[["r",{x:0,y:15,w:50,h:5},"#755",{width:4,color:"#866"}],["c",{x:25,y:17.5,diameter:50/3.5},"#944",{width:4,color:"#844"}],["p",[[50,0],[50,35]],"#755",5],["p",[[0,0],[0,35]],"#755",5]];function L(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function N(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function W(t){return function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?L(Object(e),!0).forEach((function(n){N(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):L(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({team:"red",layout:{frame:u(0,0,50,35),layoutData:M},speed:function(){return y()/4},weapons:[{weapon:C,locations:[l(7,0),l(43,0)]}],health:4,shootingPattern:"ai",movementType:g.scrollDown,pointingDirection:_.DOWN,stayWithinFrame:!1},t||{})}var B=[["c",{x:22.5,y:0,diameter:45/3.5},"#944",{width:4,color:"#844"}],["p",[[5,0],[21.5,10],[22.5,20],[23.5,10],[40,0]],"#555",10]];function R(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function I(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function U(t){return function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?R(Object(e),!0).forEach((function(n){I(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):R(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({team:"red",layout:{frame:u(0,0,45,20),layoutData:B},speed:function(){return y()/4},weapons:[{weapon:C,locations:[l(22.5,0)]}],health:1,shootingPattern:"ai",movementType:g.scrollDown,pointingDirection:_.DOWN,stayWithinFrame:!1},t||{})}function Y(t,n){var e=U({health:2}),r=e.layout.frame.h,o=W(),i=o.layout.frame.h;return{waves:c(20).map((function(a,c){return c%2==0?{pieces:[t(e,l(n.w/2,-r)),t(e,l(n.w/2-60,-r)),t(e,l(n.w/2+60,-r))],durationInSeconds:3}:{pieces:[t(o,l(n.w/2,-i)),t(o,l(n.w/2-120,-i)),t(o,l(n.w/2+120,-i))],durationInSeconds:6}}))}}function H(t,n){var e=U({health:2}),r=e.layout.frame.h,o=W(),i=o.layout.frame.h;return{waves:c(20).map((function(a,c){return c%2==0?{pieces:[t(e,l(n.w/2,-r)),t(e,l(n.w/2-60,-r)),t(e,l(n.w/2+60,-r))],durationInSeconds:3}:{pieces:[t(o,l(n.w/2,-i)),t(o,l(n.w/2-120,-i)),t(o,l(n.w/2+120,-i))],durationInSeconds:6}}))}}function X(t,n){var e=0,r=[],o=w(t),i=E(t.dimensions,o,(function(t){r.push(t)})),a=function(t,n,e){return function(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return r.reduce((function(r,i){if(i.hit)return i.hit.framesShown++,i.hit.framesShown>Math.floor(m()/6)||(r.push(i),n({layoutData:i.weapon.hitLayout(i.hit.framesShown)},i.hit.location)),r;var a={x:i.location.x,y:i.direction===_.DOWN?i.location.y+v(i.weapon.speed):i.location.y-v(i.weapon.speed)};if(!s(t).inFrame(a))return r;var c=T(T({},i),{},{location:a});return o.some((function(t){return t.hit(a,i.team)}))&&(c.hit={framesShown:0,location:a},e(i.team,1)),r.push(c),n({layoutData:c.hit?i.weapon.hitLayout(1):i.weapon.layout},a),r}),[])}}(t.dimensions,o,(function(t,e){f.team===t&&(f.hits+=e,n.setScore(5*f.hits))})),c=l(t.dimensions.w/2-25,t.dimensions.h-100),u=i(S(),c),f={team:u.team,hits:0},h=[Y(i,t.dimensions),H(i,t.dimensions)],d=-1,p=null,y=null,g=[];function b(){d++,(p=h[d])?(n.setMessage("Level ".concat(d+1),5),y={index:0,wave:p.waves[0]},g=g.concat(y.wave.pieces)):n.won()}return b(),{nextTick:function(){if((e+=1/m())>y.wave.durationInSeconds){if(y={index:y.index+1,wave:p.waves[y.index+1]},e=0,!y.wave)return void b();g=g.concat(y.wave.pieces)}u.shouldRender()||n.gameOver(),u.render(),(g=g.filter((function(t){return t.shouldRender()}))).forEach((function(t){return t.render()})),r=a(r,g.concat(u))},dispose:function(){u.dispose()}}}var z=o.$,V=function(){var t=o.$("#gameplay"),n=o.$("#background"),e=h(t),r=h(n);r.fill("#81bc5c"),r.drawRect(u(r.dimensions.w/2-100,0,200,r.dimensions.h),"#4d9bba"),r.fill("rgba(200,200,200, 0.5"),function(t){var n={gameOver:function(){e="Game Over",o=null,setTimeout(i,1e4)},won:function(){e="You WIN!!!!",o=null,setTimeout(i,1e4)},setScore:function(t){z(".game-score").innerText="Score: ".concat(t)},setMessage:function(t,n){e=t,r=n*m(),console.log("pause duration: ",r)}},e=null,r=0,o=X(t,n),i=function(){o=X(t,n),e=null};O((function(t,n){"Escape"===n.key&&i()}));var a=[],c=0,u=function(t){p=t,a.push(t);var n=Math.floor(a.reduce((function(t,n){return t+n}),0)/a.length);a.length>20&&a.splice(0,1),c!==n&&(z(".game-fps").innerText="fps: ".concat(n),c=n)},s=Date.now();requestAnimationFrame((function n(i){var a=i-s;s=i;var c=1e3/a;u(Math.floor(c)),t.clear(),e&&t.drawText(l(t.dimensions.w/2-140,t.dimensions.h/2),e,"55px Arial Bold"),requestAnimationFrame(n),o&&(r>0?0===--r&&(e=null):o.nextTick())}))}(e)}},function(t,n,e){"use strict";e.r(n),function(t){var n=e(2);e(5);"DEVELOPMENT"!==t.env&&("serviceWorker"in navigator?navigator.serviceWorker.register("./sw.js").then((function(t){console.log("Service worker registration succeeded:",t)})).catch((function(t){console.log("Service worker registration failed:",t)})):console.log("Service workers are not supported.")),Object(n.a)()}.call(this,e(4))},function(t,n){var e,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,s=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var t=c(h);l=!0;for(var n=s.length;n;){for(u=s,s=[];++f<n;)u&&u[f].run();f=-1,n=s.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function m(){}o.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];s.push(new p(t,n)),1!==s.length||l||c(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,n,e){var r=e(6),o=e(7);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},function(t,n,e){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),a=[];function c(t){for(var n=-1,e=0;e<a.length;e++)if(a[e].identifier===t){n=e;break}return n}function u(t,n){for(var e={},r=[],o=0;o<t.length;o++){var i=t[o],u=n.base?i[0]+n.base:i[0],s=e[u]||0,l="".concat(u," ").concat(s);e[u]=s+1;var f=c(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(h)):a.push({identifier:l,updater:y(h,n),references:1}),r.push(l)}return r}function s(t){var n=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){n.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(n);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,f=(l=[],function(t,n){return l[t]=n,l.filter(Boolean).join("\n")});function h(t,n,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=f(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function d(t,n,e){var r=e.css,o=e.media,i=e.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,m=0;function y(t,n){var e,r,o;if(n.singleton){var i=m++;e=p||(p=s(n)),r=h.bind(null,e,i,!1),o=h.bind(null,e,i,!0)}else e=s(n),r=d.bind(null,e,n),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var e=u(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<e.length;r++){var o=c(e[r]);a[o].references--}for(var i=u(t,n),s=0;s<e.length;s++){var l=c(e[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}e=i}}}},function(t,n,e){"use strict";e.r(n);var r=e(1),o=e.n(r)()(!0);o.push([t.i,"* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n","",{version:3,sources:["webpack://styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;AACX;AACA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,OAAO;EACP,MAAM;EACN,cAAc;EACd,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,WAAW;EACX,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,UAAU;EACV,0CAA0C;EAC1C,YAAY;EACZ,yCAAyC;EACzC,eAAe;AACjB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n}\n#main {\n  position: relative;\n  background-color: #d4e4f4;\n  width: 100%;\n  height: 100%;\n}\ncanvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  display: block;\n  margin: 0 auto;\n}\n.game-score {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  right: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n\n.game-fps {\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background-color: rgba(200, 200, 200, 0.8);\n  padding: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n}\n"],sourceRoot:""}]),n.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,